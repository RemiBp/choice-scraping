#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
G√©n√©rateur de posts pour Choice App utilisant OpenAI GPT-3.5-turbo
Ce script g√©n√®re des posts r√©alistes pour les restaurants, √©v√©nements et lieux de beaut√©
"""

# Importer les biblioth√®ques n√©cessaires
import os
import sys
import json
import time
import random
import logging
import requests
import hashlib
import argparse
import re
import math
from datetime import datetime, timedelta
from pymongo import MongoClient
from bson.objectid import ObjectId

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("openai_post_generator.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Configuration OpenAI
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"
OPENAI_MODEL = "gpt-3.5-turbo"

# Remplacer la classe MistralClient par OpenAIClient
class OpenAIClient:
    """Client pour l'API OpenAI pour g√©n√©rer du texte avec GPT-3.5-turbo"""
    
    def __init__(self):
        self.api_key = OPENAI_API_KEY
        self.api_url = OPENAI_API_URL
        if not self.api_key:
            raise ValueError("Cl√© API OpenAI manquante. D√©finir la variable d'environnement OPENAI_API_KEY.")
    
    def generate_text(self, prompt, max_tokens=500, temperature=0.7):
        """
        G√©n√®re du texte avec l'API OpenAI
        
        Args:
            prompt: Le texte d'entr√©e pour guider la g√©n√©ration
            max_tokens: Nombre maximum de tokens √† g√©n√©rer
            temperature: Contr√¥le la cr√©ativit√© (0.0 √† 1.0)
            
        Returns:
            Le texte g√©n√©r√©
        """
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": OPENAI_MODEL,
            "messages": [
                {"role": "system", "content": "Tu es un assistant expert en g√©n√©ration de contenu pour une application mobile sociale bas√©e sur les exp√©riences locales (restaurants, √©v√©nements, beaut√©). R√©ponds toujours en fran√ßais."},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": max_tokens,
            "temperature": temperature,
            "n": 1,
            "stop": None
        }

        try:
            response = requests.post(self.api_url, headers=headers, json=payload, timeout=90)
            response.raise_for_status()

            result = response.json()

            if "choices" in result and len(result["choices"]) > 0:
                generated_text = result["choices"][0]["message"]["content"].strip()
                return generated_text
            else:
                logger.warning(f"R√©ponse inattendue d'OpenAI: {result}")
                return None

        except requests.exceptions.RequestException as e:
            logger.error(f"Erreur de requ√™te OpenAI: {e}")
            if e.response is not None:
                 logger.error(f"R√©ponse d'erreur OpenAI ({e.response.status_code}): {e.response.text}")
            return None
        except Exception as e:
             logger.error(f"Erreur inattendue lors de l'appel OpenAI: {e}")
             return None
    
    def generate_text_with_retry(self, prompt, max_retries=2):
        """Version avec retry de la g√©n√©ration de texte"""
        for attempt in range(max_retries + 1):
            try:
                # Essayer de g√©n√©rer le texte
                response_text = self.generate_text(prompt)

                # Si la r√©ponse est valide, la retourner
                if response_text:
                    return response_text

                # Si la r√©ponse est vide ou None, logger et r√©essayer (sauf dernier essai)
                logger.warning(f"Tentative {attempt + 1}/{max_retries + 1}: R√©ponse vide re√ßue d'OpenAI.")

            except Exception as e:
                # Logger l'erreur et r√©essayer (sauf dernier essai)
                logger.error(f"Tentative {attempt + 1}/{max_retries + 1}: Erreur lors de la g√©n√©ration - {e}")

            # Attendre avant de r√©essayer (sauf apr√®s le dernier essai)
            if attempt < max_retries:
                wait_time = 2 ** attempt # Backoff exponentiel simple
                logger.info(f"Attente de {wait_time}s avant la prochaine tentative...")
                time.sleep(wait_time)

        # Si toutes les tentatives √©chouent
        logger.error(f"√âchec de la g√©n√©ration de texte apr√®s {max_retries + 1} tentatives.")
        return None

# --- Configuration MongoDB ---
# URI par d√©faut
DEFAULT_MONGO_URI = "mongodb+srv://remibarbier:Calvi8Pierc2@lieuxrestauration.szq31.mongodb.net/?retryWrites=true&w=majority&appName=lieuxrestauration"
# URI pour les tests
TEST_MONGO_URI = "mongodb+srv://remibarbier:Calvi8Pierc2@lieuxrestauration.szq31.mongodb.net/mongo_connection_test?retryWrites=true&w=majority&appName=lieuxrestauration"

# URI active (peut √™tre modifi√©e par argument)
MONGO_URI = os.environ.get("MONGO_URI", DEFAULT_MONGO_URI)

# Option pour les tests
USE_TEST_CONNECTION = os.environ.get("USE_TEST_CONNECTION", "false").lower() == "true"
if USE_TEST_CONNECTION:
    logger.info("üîÑ Utilisation de la connexion de test (mongo_connection_test)")
    MONGO_URI = TEST_MONGO_URI

# Option pour ignorer les filtres (date pour √©v√©nements, active pour restaurants)
BYPASS_FILTERS = os.environ.get("BYPASS_FILTERS", "false").lower() == "true"
if BYPASS_FILTERS:
    logger.info("‚ö†Ô∏è Mode bypass: les filtres de date et d'active sont d√©sactiv√©s")

# Noms des bases de donn√©es et collections
DB_CHOICE = "choice_app"
DB_RESTAURATION = "Restauration_Officielle"
DB_LOISIR = "Loisir&Culture"
DB_BEAUTY = "Beauty_Wellness"

COLL_POSTS = "Posts"
COLL_USERS = "Users"
COLL_PRODUCERS_CHOICE = "producers"
COLL_PRODUCERS_RESTAURATION = "producers"
COLL_VENUES_LOISIR = "Loisir_Paris_Producers"
COLL_EVENTS_LOISIR = "Loisir_Paris_Evenements"
COLL_BEAUTY_PLACES = "BeautyPlaces"
COLL_WELLNESS_PLACES = "BeautyPlaces"

# --- Configuration du g√©n√©rateur ---
DEFAULT_CONFIG = {
    # Configuration g√©n√©rale
    "sleep_time": 300,                 # Temps d'attente entre les lots (secondes)
    "ai_enabled": True,                # Activer l'IA (Mistral-7B)
    "active_hours_start": 3,           # Heure de d√©but (3 AM)
    "active_hours_end": 7,             # Heure de fin (7 AM)
    
    # Configuration des posts de producteurs (√©v√©nements)
    "event_posts_count": 3,            # Nombre de posts d'√©v√©nements √† g√©n√©rer
    "min_days_between_event_posts": 3, # Jours minimum entre deux posts pour le m√™me lieu culturel
    
    # Configuration des posts de producteurs (restaurants)
    "restaurant_posts_count": 2,       # Nombre de posts de restaurants √† g√©n√©rer
    "min_days_between_resto_posts": 3, # Jours minimum entre deux posts pour le m√™me restaurant
    
    # Configuration des posts de producteurs (beaut√©/bien-√™tre)
    "beauty_posts_count": 2,           # Nombre de posts de beaut√©/bien-√™tre √† g√©n√©rer
    "min_days_between_beauty_posts": 3, # Jours minimum entre deux posts pour le m√™me lieu de beaut√©
    
    # Configuration des posts d'utilisateurs
    "user_posts_count": 5,             # Nombre de posts d'utilisateurs √† g√©n√©rer
    "min_location_duration": 30,       # Dur√©e minimale en minutes √† un lieu pour consid√©rer comme visite valide
    "max_post_age_days": 14,           # Nombre de jours max depuis la visite pour g√©n√©rer un post
    "good_review_probability": 0.7,    # Probabilit√© d'un avis positif
    "max_users": 50,                   # Nombre maximum d'utilisateurs √† traiter (None = tous)
    "verify_location": True,           # V√©rifier que l'utilisateur a bien visit√© le lieu
    "location_radius_meters": 30,      # Rayon en m√®tres autour du lieu pour valider la pr√©sence
}

# --- R√©pertoires pour les checkpoints ---
WORKSPACE_DIR = os.environ.get("WORKSPACE_DIR", "/workspace")
CHECKPOINTS_DIR = os.path.join(WORKSPACE_DIR, "checkpoints")
API_CACHE_DIR = os.path.join(WORKSPACE_DIR, "api_cache")

# Cr√©er les r√©pertoires n√©cessaires
os.makedirs(CHECKPOINTS_DIR, exist_ok=True)
os.makedirs(API_CACHE_DIR, exist_ok=True)

# --- Cat√©gories de lieux et leurs aspects √† √©valuer pour les posts utilisateurs ---
VENUE_CATEGORIES = {
    "restaurant": {
        "aspects": ["service", "qualit√© des plats", "ambiance", "rapport qualit√©-prix", "pr√©sentation"],
        "emotions_positive": ["satisfait", "ravi", "impressionn√©", "√©merveill√©", "combl√©", "surpris"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "contrari√©", "agac√©"],
        "emojis_positive": ["üòç", "üëå", "ü§§", "üòã", "üçΩÔ∏è", "ü•Ç", "üç∑", "‚ú®", "üë©‚Äçüç≥", "üë®‚Äçüç≥", "üî•"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "caf√©": {
        "aspects": ["qualit√© du caf√©", "p√¢tisseries", "ambiance", "service", "confort"],
        "emotions_positive": ["satisfait", "ravi", "r√©confort√©", "d√©tendu", "charm√©"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "agac√©"],
        "emojis_positive": ["‚òï", "üç∞", "üòå", "‚ú®", "üìö", "ü•ê", "ü•ñ", "üçÆ"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "bar": {
        "aspects": ["ambiance", "service", "qualit√© des boissons", "musique", "public"],
        "emotions_positive": ["satisfait", "ravi", "euphorique", "festif", "enthousiaste"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "contrari√©"],
        "emojis_positive": ["üçª", "üçπ", "ü•Ç", "üç∏", "üç∑", "üéµ", "üé∂", "üíÉ", "üï∫"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "musique": {
        "aspects": ["acoustique", "performance", "ambiance", "public", "organisation"],
        "emotions_positive": ["√©mu", "transport√©", "euphorique", "conquis", "enthousiaste"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "agac√©"],
        "emojis_positive": ["üéµ", "üé∂", "üé∏", "üéπ", "üé§", "üé∑", "ü•Å", "üéª", "üòç", "ü§©"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "th√©√¢tre": {
        "aspects": ["jeu d'acteurs", "mise en sc√®ne", "texte", "d√©cors", "audience"],
        "emotions_positive": ["√©mu", "transport√©", "captiv√©", "impressionn√©", "ravi"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "ennuy√©"],
        "emojis_positive": ["üé≠", "üëè", "üé¨", "üòç", "ü§©", "‚ú®", "üíØ"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "exposition": {
        "aspects": ["≈ìuvres", "sc√©nographie", "information", "accessibilit√©", "originalit√©"],
        "emotions_positive": ["inspir√©", "√©merveill√©", "captiv√©", "enrichi", "impressionn√©"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "indiff√©rent"],
        "emojis_positive": ["üé®", "üñºÔ∏è", "üì∑", "üèõÔ∏è", "‚ú®", "üòç", "ü§©", "üëÅÔ∏è"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "cin√©ma": {
        "aspects": ["film", "acteurs", "r√©alisation", "atmosph√®re", "confort"],
        "emotions_positive": ["captiv√©", "√©mu", "diverti", "impressionn√©", "satisfait"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "ennuy√©"],
        "emojis_positive": ["üé¨", "üé•", "üçø", "üéûÔ∏è", "üòç", "ü§©", "üëè"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "festival": {
        "aspects": ["programmation", "organisation", "ambiance", "installations", "exp√©rience globale"],
        "emotions_positive": ["euphorique", "enchant√©", "transport√©", "√©merveill√©", "exalt√©"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "contrari√©"],
        "emojis_positive": ["üé™", "üé°", "üéµ", "üé∂", "üéâ", "‚ú®", "üé≠", "üé¨", "üé®"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "spa": {
        "aspects": ["soins", "ambiance", "service", "propret√©", "rapport qualit√©-prix"],
        "emotions_positive": ["d√©tendu", "relax√©", "ressourc√©", "apais√©", "revitalis√©"],
        "emotions_negative": ["d√©√ßu", "stress√©", "m√©content", "insatisfait", "tendu"],
        "emojis_positive": ["üíÜ", "üßñ", "‚ú®", "üåø", "üí¶", "üîÜ", "üå∏", "üßò", "üí´"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "institut_beaute": {
        "aspects": ["soins", "expertise", "accueil", "hygi√®ne", "r√©sultat"],
        "emotions_positive": ["embelli", "satisfait", "rayonnant", "confiant", "charm√©"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "mal √† l'aise"],
        "emojis_positive": ["‚ú®", "üíÖ", "üíÜ", "üëÑ", "üåø", "üß¥", "üíÑ", "üíØ", "üå∏"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "salon_coiffure": {
        "aspects": ["coupe", "conseil", "technique", "accueil", "r√©sultat"],
        "emotions_positive": ["satisfait", "transform√©", "embelli", "confiant", "ravi"],
        "emotions_negative": ["d√©√ßu", "insatisfait", "frustr√©", "m√©content", "contrari√©"],
        "emojis_positive": ["üíá", "‚úÇÔ∏è", "üíÅ", "‚ú®", "üîù", "ü§©", "üëå", "üíØ"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    },
    "default": {
        "aspects": ["qualit√© g√©n√©rale", "service", "ambiance", "rapport qualit√©-prix", "exp√©rience"],
        "emotions_positive": ["satisfait", "ravi", "impressionn√©", "content", "combl√©"],
        "emotions_negative": ["d√©√ßu", "frustr√©", "m√©content", "insatisfait", "contrari√©"],
        "emojis_positive": ["üëç", "‚ú®", "üôÇ", "üòä", "üëè", "üíØ"],
        "emojis_negative": ["üòï", "üòû", "üòí", "üëé", "ü§î", "üí∏", "‚è±Ô∏è"]
    }
}

# Mappage des cat√©gories de restaurant vers les cat√©gories d'√©valuation
RESTAURANT_CATEGORY_MAPPING = {
    "italien": "restaurant",
    "japonais": "restaurant",
    "fran√ßais": "restaurant",
    "vietnamien": "restaurant",
    "chinois": "restaurant",
    "thai": "restaurant",
    "indien": "restaurant",
    "mexicain": "restaurant",
    "libanais": "restaurant",
    "caf√©": "caf√©",
    "boulangerie": "caf√©",
    "p√¢tisserie": "caf√©",
    "bar": "bar",
    "pub": "bar",
    "wine bar": "bar",
    "cocktail bar": "bar",
    "brasserie": "restaurant",
    "cr√™perie": "restaurant",
    "sushi": "restaurant",
    "burger": "restaurant",
    "pizza": "restaurant",
    "sandwich": "restaurant",
    "fastfood": "restaurant",
    "fast food": "restaurant",
    "v√©g√©tarien": "restaurant",
    "vegan": "restaurant",
    "brunch": "caf√©",
    # Par d√©faut, tout autre est consid√©r√© comme "restaurant"
}

# Mappage des cat√©gories d'√©v√©nements vers les cat√©gories d'√©valuation
EVENT_CATEGORY_MAPPING = {
    "concert": "musique",
    "musique": "musique",
    "√©lectronique": "musique",
    "techno": "musique",
    "rock": "musique",
    "jazz": "musique",
    "classique": "musique",
    "op√©ra": "musique",
    "th√©√¢tre": "th√©√¢tre",
    "com√©die": "th√©√¢tre",
    "danse": "th√©√¢tre",
}

# Mappage des cat√©gories de lieux de beaut√© vers les cat√©gories d'√©valuation
BEAUTY_CATEGORY_MAPPING = {
    "spa": "spa",
    "hammam": "spa",
    "sauna": "spa",
    "massage": "spa",
    "soins du corps": "spa",
    "bien-√™tre": "spa",
    "relaxation": "spa",
    "institut": "institut_beaute",
    "institut de beaut√©": "institut_beaute",
    "soin visage": "institut_beaute",
    "soin du visage": "institut_beaute",
    "√©pilation": "institut_beaute",
    "esth√©tique": "institut_beaute",
    "manucure": "institut_beaute",
    "p√©dicure": "institut_beaute",
    "onglerie": "institut_beaute",
    "coiffeur": "salon_coiffure",
    "coiffure": "salon_coiffure",
    "salon de coiffure": "salon_coiffure",
    "barbier": "salon_coiffure",
    "salon": "salon_coiffure",
    "beaut√©": "institut_beaute"
}

# --- Fonctions utilitaires ---

def save_checkpoint(name, data):
    """Sauvegarde un checkpoint"""
    checkpoint_path = os.path.join(CHECKPOINTS_DIR, f"post_generator_{name}.json")
    with open(checkpoint_path, 'w') as f:
        json.dump(data, f)
    logger.info(f"Checkpoint sauvegard√©: {name}")

def load_checkpoint(name):
    """Charge un checkpoint"""
    checkpoint_path = os.path.join(CHECKPOINTS_DIR, f"post_generator_{name}.json")
    if os.path.exists(checkpoint_path):
        with open(checkpoint_path, 'r') as f:
            return json.load(f)
    return None

def cache_api_response(prompt, response):
    """Cache la r√©ponse g√©n√©r√©e"""
    prompt_hash = hashlib.md5(prompt.encode()).hexdigest()
    cache_path = os.path.join(API_CACHE_DIR, f"{prompt_hash}.json")
    with open(cache_path, 'w') as f:
        json.dump({
            "prompt": prompt,
            "response": response,
            "timestamp": datetime.now().isoformat()
        }, f)

def get_cached_response(prompt):
    """R√©cup√®re une r√©ponse en cache"""
    prompt_hash = hashlib.md5(prompt.encode()).hexdigest()
    cache_path = os.path.join(API_CACHE_DIR, f"{prompt_hash}.json")
    if os.path.exists(cache_path):
        with open(cache_path, 'r') as f:
            cached = json.load(f)
            # N'utiliser le cache que s'il a moins de 24 heures
            cache_time = datetime.fromisoformat(cached["timestamp"])
            if datetime.now() - cache_time < timedelta(hours=24):
                return cached["response"]
    return None

def parse_date_fr(date_str):
    """Parse une date au format fran√ßais (DD/MM/YYYY)"""
    if not date_str or date_str == "Dates non disponibles":
        return None
    
    # Format standard: DD/MM/YYYY
    if re.match(r'\d{2}/\d{2}/\d{4}', date_str):
        day, month, year = map(int, date_str.split('/'))
        return datetime(year, month, day)
    
    # Format "sam 15 f√©vr." (pour shotgun)
    months_fr = {
        'janv': 1, 'f√©vr': 2, 'mars': 3, 'avr': 4, 'mai': 5, 'juin': 6,
        'juil': 7, 'ao√ªt': 8, 'sept': 9, 'oct': 10, 'nov': 11, 'd√©c': 12
    }
    
    # Regex pour extraire le jour et le mois
    match = re.search(r'(\d{1,2})\s+(\w+)', date_str)
    if match:
        day = int(match.group(1))
        month_str = match.group(2).lower()[:4]  # Premiers caract√®res du mois
        
        # Trouver le mois correspondant
        month = None
        for m_name, m_num in months_fr.items():
            if month_str in m_name:
                month = m_num
                break
        
        if month:
            # Ann√©e en cours par d√©faut, ou ann√©e suivante si date d√©j√† pass√©e
            year = datetime.now().year
            date_obj = datetime(year, month, day)
            
            # Si la date est d√©j√† pass√©e, on suppose que c'est l'ann√©e prochaine
            if date_obj < datetime.now() and month < datetime.now().month:
                date_obj = datetime(year + 1, month, day)
            
            return date_obj
    
    return None

def is_event_ended(event):
    """V√©rifie si un √©v√©nement est termin√© en fonction des dates"""
    # Si le mode bypass est activ√©, consid√©rer tous les √©v√©nements comme valides
    if BYPASS_FILTERS:
        return False
        
    today = datetime.now().date()
    
    # V√©rifier la date de fin si elle existe
    if "date_fin" in event and event["date_fin"]:
        end_date = parse_date_fr(event["date_fin"])
        if end_date and end_date.date() < today:
            return True
    
    # V√©rifier les prochaines dates
    if "prochaines_dates" in event and event["prochaines_dates"]:
        # Si les dates ne sont pas disponibles
        if event["prochaines_dates"] == "Dates non disponibles":
            # On consid√®re que l'√©v√©nement est actif pour les √©v√©nements r√©cents (moins de 2 semaines)
            if "dateAjout" in event:
                added_date = parse_date_fr(event["dateAjout"])
                if added_date and (today - added_date.date()).days > 14:
                    return True
            return False
        
        # Analyser la cha√Æne de prochaines dates
        date_obj = parse_date_fr(event["prochaines_dates"])
        if date_obj and date_obj.date() < today:
            return True
    
    # Par d√©faut, on consid√®re que l'√©v√©nement est toujours actif
    return False

def get_db_connections(uri=None):
    """√âtablit des connexions aux bases de donn√©es MongoDB"""
    try:
        # Utiliser l'URI fourni ou l'URI par d√©faut
        connection_uri = uri or MONGO_URI
        logger.info(f"Connexion √† MongoDB: {connection_uri.split('@')[1].split('/')[0]}...")
        
        client = MongoClient(connection_uri)
        
        # Acc√©der aux bases de donn√©es
        db_choice = client[DB_CHOICE]
        db_restauration = client[DB_RESTAURATION]
        db_loisir = client[DB_LOISIR]
        db_beauty = client[DB_BEAUTY]
        
        # V√©rifier si les collections existent
        collections_choice = db_choice.list_collection_names()
        collections_restauration = db_restauration.list_collection_names()
        collections_loisir = db_loisir.list_collection_names()
        collections_beauty = db_beauty.list_collection_names()
        
        logger.info(f"Collections disponibles:")
        logger.info(f"  ‚Ä¢ Choice: {', '.join(collections_choice)}")
        logger.info(f"  ‚Ä¢ Restauration: {', '.join(collections_restauration)}")
        logger.info(f"  ‚Ä¢ Loisir: {', '.join(collections_loisir)}")
        logger.info(f"  ‚Ä¢ Beauty: {', '.join(collections_beauty)}")
        
        # V√©rifier l'acc√®s aux collections sp√©cifiques
        posts_count = db_choice[COLL_POSTS].count_documents({}) if COLL_POSTS in collections_choice else 0
        venues_count = db_loisir[COLL_VENUES_LOISIR].count_documents({}) if COLL_VENUES_LOISIR in collections_loisir else 0
        events_count = db_loisir[COLL_EVENTS_LOISIR].count_documents({}) if COLL_EVENTS_LOISIR in collections_loisir else 0
        restaurants_count = db_restauration[COLL_PRODUCERS_RESTAURATION].count_documents({}) if COLL_PRODUCERS_RESTAURATION in collections_restauration else 0
        beauty_count = db_beauty[COLL_BEAUTY_PLACES].count_documents({}) if COLL_BEAUTY_PLACES in collections_beauty else 0
        
        logger.info(f"Connexion √©tablie aux bases de donn√©es MongoDB")
        logger.info(f"Posts: {posts_count}, Lieux: {venues_count}, √âv√©nements: {events_count}, Restaurants: {restaurants_count}, Lieux de beaut√©: {beauty_count}")
        
        return {
            "choice": db_choice,
            "restauration": db_restauration,
            "loisir": db_loisir,
            "beauty": db_beauty
        }
        
    except Exception as e:
        logger.error(f"Erreur de connexion MongoDB: {e}")
        logger.error(f"D√©tails: {str(e)}")
        raise

def generate_post_with_openai(prompt, openai_client):
    """G√©n√®re le contenu d'un post en utilisant le client OpenAI."""
    # Utiliser le cache si disponible
    cached = get_cached_response(prompt)
    if cached:
        logger.info("Utilisation de la r√©ponse OpenAI mise en cache.")
        return cached

    # G√©n√©rer le texte avec le client OpenAI
    generated_text = openai_client.generate_text_with_retry(prompt)

    # Mettre en cache la r√©ponse si elle est valide
    if generated_text:
        cache_api_response(prompt, generated_text)

    return generated_text

# --- Fonctions pour les Posts des lieux culturels (√©v√©nements) ---

def create_post_for_event(db_connections, event, leisure_venue, openai_client):
    """Cr√©e un post producteur pour un √©v√©nement en utilisant OpenAI."""
    try:
        # V√©rifier que l'√©v√©nement et le lieu existent
        if not event or not leisure_venue:
            logger.warning("‚ùå √âv√©nement ou lieu manquant")
            return None
        
        # R√©cup√©rer les donn√©es de l'√©v√©nement (avec diff√©rents noms de champs possibles)
        # Titre de l'√©v√©nement
        event_title = None
        for field in ["intitul√©", "titre", "name", "title"]:
            if field in event and event[field]:
                event_title = event[field]
                break
        
        if not event_title:
            event_title = "√âv√©nement"  # Valeur par d√©faut
            logger.warning("‚ö†Ô∏è Titre d'√©v√©nement non trouv√©, utilisation de la valeur par d√©faut")
        
        # D√©tails de l'√©v√©nement
        event_details = ""
        for field in ["d√©tail", "description", "content", "details"]:
            if field in event and event[field]:
                event_details = event[field]
                break
        
        # Cat√©gorie de l'√©v√©nement
        event_category = ""
        for field in ["cat√©gorie", "category", "type"]:
            if field in event and event[field]:
                event_category = event[field]
                break
        
        # Image de l'√©v√©nement
        event_image = ""
        for field in ["image", "photo", "cover", "thumbnail"]:
            if field in event and event[field]:
                event_image = event[field]
                break
        
        # Si pas d'image principale, v√©rifier dans le lineup
        if not event_image and "lineup" in event and isinstance(event["lineup"], list) and len(event["lineup"]) > 0:
            for artist in event["lineup"]:
                if isinstance(artist, dict) and "image" in artist and artist["image"]:
                    event_image = artist["image"]
                    break
        
        # Dates de l'√©v√©nement
        event_dates = ""
        for field in ["prochaines_dates", "dates", "date", "dateEvenement", "event_date"]:
            if field in event and event[field]:
                event_dates = event[field]
                break
        
        # Location et adresse
        event_location = {}
        if "location" in event and isinstance(event["location"], dict):
            # Structure MongoDB observ√©e
            if "type" in event["location"] and event["location"]["type"] == "Point" and "coordinates" in event["location"]:
                event_location = {
                    "type": event["location"]["type"],
                    "coordinates": event["location"]["coordinates"]
                }
            elif "adresse" in event["location"]:
                event_location = {
                    "address": event["location"]["adresse"],
                    "coords": event["location"].get("coords", {})
                }
        elif "lieu" in event:
            event_location = {"address": event["lieu"]}
            
        # Lineup / artistes
        artists = []
        if "lineup" in event and isinstance(event["lineup"], list):
            for artist in event["lineup"]:
                if isinstance(artist, dict) and "nom" in artist:
                    artists.append(artist["nom"])
        
        # Informations du lieu - Assurer qu'on a toujours un nom valide
        venue_name = None
        for field in ["name", "nom", "lieu", "title"]:
            if field in leisure_venue and leisure_venue[field]:
                venue_name = leisure_venue[field]
                break
                
        if not venue_name or venue_name.strip() == "":
            venue_name = "Lieu Culturel"  # Fallback si nom vide
            logger.warning("‚ö†Ô∏è Nom de lieu non trouv√©, utilisation de la valeur par d√©faut")
        
        venue_id = str(leisure_venue.get("_id", ""))
        
        # Chercher l'avatar dans diff√©rents champs possibles
        venue_avatar = None
        avatar_fields = ["profile_image", "avatar", "photo", "image", "logo"]
        for field in avatar_fields:
            if field in leisure_venue and leisure_venue[field] and isinstance(leisure_venue[field], str):
                venue_avatar = leisure_venue[field]
                break
        
        # Assurer un avatar par d√©faut correct
        if not venue_avatar or venue_avatar.strip() == "":
            venue_avatar = "/images/default_venue_avatar.png"
            logger.info(f"‚ö†Ô∏è Avatar manquant pour {venue_name}, utilisation de l'avatar par d√©faut")
        
        # V√©rifier si un post similaire existe d√©j√† r√©cemment (√©viter les doublons)
        try:
            # Utiliser count_documents au lieu de count() sur le curseur
            min_days = DEFAULT_CONFIG["min_days_between_event_posts"]
            recent_posts_count = db_connections["choice"][COLL_POSTS].count_documents({
                "producer_id": venue_id,
                "referenced_event_id": str(event["_id"]),
                "time_posted": {"$gt": (datetime.now() - timedelta(days=min_days)).isoformat()}
            })
            
            if recent_posts_count > 0:
                logger.info(f"Post similaire trouv√© r√©cemment pour {venue_name} -> {event_title}, ignor√©.")
                return None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la v√©rification des posts r√©cents: {e}")
        
        # Construire le prompt pour OpenAI GPT-3.5-turbo
        post_prompt = f"""
        R√©dige un post engageant pour les r√©seaux sociaux o√π le lieu culturel "{venue_name}" pr√©sente l'√©v√©nement "{event_title}".

        Informations sur l'√©v√©nement:
        - Titre: {event_title}
        - Cat√©gorie: {event_category}
        - D√©tails: {event_details}
        - Dates: {event_dates}
        {f"- Artistes: {', '.join(artists)}" if artists else ""}
        
        Le post doit:
        1. √ätre √©crit du point de vue du lieu culturel qui accueille/pr√©sente l'√©v√©nement
        2. √ätre captivant et inciter les utilisateurs √† d√©couvrir l'√©v√©nement
        3. Inclure des √©mojis pertinents (comme ‚ú®üé≠üéµ selon le th√®me)
        4. Faire entre 300-400 caract√®res maximum
        5. Se terminer par une question ou une incitation √† l'action
        
        N'invente aucune information qui n'est pas fournie. Utilise uniquement les faits donn√©s.
        Supprime toute instruction et ne r√©ponds qu'avec le texte final du post.
        """
        
        # G√©n√©rer le contenu du post
        content = None
        if DEFAULT_CONFIG["ai_enabled"] and openai_client:
            content = generate_post_with_openai(post_prompt, openai_client)
        
        # Si OpenAI √©choue ou est d√©sactiv√©, g√©n√©rer un contenu de secours
        if not content:
            logger.warning(f"‚ö†Ô∏è G√©n√©ration AI (OpenAI) √©chou√©e, utilisation d'un contenu de secours")
            
            # Cr√©er une description d'√©v√©nement plus engageante
            emoji_map = {
                "concert": "üéµüé∏",
                "musique": "üéßüéπ",
                "th√©√¢tre": "üé≠üé¨",
                "exposition": "üñºÔ∏èüé®",
                "house": "üîäüíø",
                "deep": "üéßüîä",
                "techno": "üéõÔ∏èüéöÔ∏è",
                "dj": "üéßüéöÔ∏è",
                "art": "üé®üñåÔ∏è",
                "com√©die": "üòÇüé≠",
                "danse": "üíÉüï∫",
                "festival": "üéâüéä"
            }
            
            # Choisir des √©mojis appropri√©s bas√©s sur la cat√©gorie
            emojis = "‚ú®üéüÔ∏è"  # √âmojis par d√©faut
            category_lower = event_category.lower() if event_category else ""
            
            for key, value in emoji_map.items():
                if key in category_lower:
                    emojis = value
                    break
            
            # Construire des phrases d'accroche vari√©es
            hooks = [
                f"{emojis} Ne manquez pas",
                f"{emojis} Rendez-vous pour d√©couvrir",
                f"{emojis} Nous sommes ravis de vous pr√©senter",
                f"{emojis} Un √©v√©nement unique vous attend :",
                f"{emojis} Rejoignez-nous pour"
            ]
            
            # Construire des appels √† l'action vari√©s
            cta = [
                "R√©servez vite votre place ! üéüÔ∏è",
                "Venez vivre cette exp√©rience unique ! ü§©",
                "On vous attend nombreux ! üë•",
                "√ätes-vous pr√™ts √† vivre ce moment exceptionnel ? üí´",
                "Ne tardez pas, les places sont limit√©es ! üéØ"
            ]
            
            # Cr√©er le contenu avec une structure am√©lior√©e
            hook = random.choice(hooks)
            action = random.choice(cta)
            
            # Limite de caract√®res pour la description
            desc_limit = 100
            details = event_details[:desc_limit] + ("..." if len(event_details) > desc_limit else "") if event_details else ""
            
            date_info = f" | {event_dates}" if event_dates else ""
            
            # Assembler le contenu final
            content = f"{hook} \"{event_title}\" {date_info}\n\n{details}\n\n{action}"
        
        # Cr√©er le post avec structure conforme au MongoDB
        post = {
            "content": content,
            "time_posted": datetime.now().isoformat(),
            "author": {
                "id": venue_id,
                "name": venue_name,
                "avatar": venue_avatar
            },
            "producer_id": venue_id,
            "referenced_event_id": str(event["_id"]),
            "isProducerPost": True,
            "isLeisureProducer": True,
            "isBeautyProducer": False,
            "isRestaurationProducer": False,
            "is_automated": True,
            "is_event_post": True,  # Ajout d'un indicateur clair pour le comptage
            "likes": 0,              # Pour compatibilit√© frontend
            "likes_count": 0,
            "comments": 0,           # Pour compatibilit√© frontend
            "comments_count": 0,
            "interested": False,     # Indique si l'utilisateur actuel est int√©ress√©
            "interested_count": 0,
            "choice": False,         # Indique si l'utilisateur actuel a choisi
            "choice_count": 0,
            "location": event_location,  # Coordonn√©es pour affichage carte
            "media": []             # Initialiser le tableau media (sera rempli ensuite)
        }

        # Ajouter l'image principale si disponible
        if event_image:
            post["media"].append({
                "type": "image",
                "url": event_image,
                "width": 800,
                "height": 600
            })
        
        # Ajouter le lineup si pr√©sent
        if "lineup" in event and isinstance(event["lineup"], list) and len(event["lineup"]) > 0:
            lineup_media = []
            for artist in event["lineup"]:
                if isinstance(artist, dict) and "image" in artist and artist["image"]:
                    lineup_media.append({
                        "type": "image",
                        "url": artist["image"],
                        "width": 400,
                        "height": 400
                    })
            
            # Ajouter les images du lineup au post
            if lineup_media:
                post["media"].extend(lineup_media[:2])  # Limiter √† 2 images suppl√©mentaires
        
        # Ins√©rer le post dans la base de donn√©es
        post_id = db_connections["choice"][COLL_POSTS].insert_one(post).inserted_id
        logger.info(f"‚úÖ Post cr√©√© avec succ√®s dans la base de donn√©es. ID: {post_id}")
        
        # Mettre √† jour l'√©v√©nement avec le post r√©f√©renc√©
        try:
            db_connections["loisir"][COLL_EVENTS_LOISIR].update_one(
                {"_id": event["_id"]},
                {"$push": {"posts": post_id}}
            )
            logger.info(f"‚úÖ √âv√©nement {event['_id']} mis √† jour avec le nouveau post r√©f√©renc√©")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la mise √† jour de l'√©v√©nement: {e}")
        
        # Mettre √† jour le producteur avec le post
        try:
            db_connections["loisir"][COLL_VENUES_LOISIR].update_one(
                {"_id": ObjectId(venue_id)},
                {"$push": {"posts": post_id}}
            )
            logger.info(f"‚úÖ Producteur {venue_id} mis √† jour avec le nouveau post")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la mise √† jour du producteur: {e}")
        
        return {
            "post_id": str(post_id),
            "event_title": event_title,
            "venue_name": venue_name
        }
        
    except Exception as e:
        logger.error(f"Erreur lors de la cr√©ation du post: {e}")
        return None

# --- Fonctions pour les Posts de restaurants ---

def create_post_for_restaurant(db_connections, restaurant, openai_client):
    """Cr√©e un post producteur pour un restaurant en utilisant OpenAI."""
    try:
        # Extraction des donn√©es du restaurant - Assurer qu'on a toujours un nom valide
        restaurant_name = restaurant.get("name", "")
        if not restaurant_name or restaurant_name.strip() == "":
            restaurant_name = "Restaurant"  # Fallback si nom vide
            
        restaurant_id = str(restaurant.get("_id", ""))
        
        # Extraire le type de cuisine (plusieurs fa√ßons possibles selon le format)
        restaurant_cuisine = ""
        if "cuisine_type" in restaurant:
            restaurant_cuisine = restaurant["cuisine_type"]
        elif "category" in restaurant and isinstance(restaurant["category"], list):
            restaurant_cuisine = ", ".join(restaurant["category"])
        
        # Chercher des plats signature
        restaurant_signature = []
        
        # V√©rifier d'abord les "dishes" directement
        if "dishes" in restaurant and isinstance(restaurant["dishes"], list):
            restaurant_signature = restaurant["dishes"][:3]
            
        # Si aucun plat signature dans "dishes", chercher dans structured_data
        elif "structured_data" in restaurant and restaurant["structured_data"]:
            struct_data = restaurant["structured_data"]
            
            # Chercher dans les Menus Globaux
            if "Menus Globaux" in struct_data and isinstance(struct_data["Menus Globaux"], list):
                for menu in struct_data["Menus Globaux"]:
                    if "inclus" in menu and isinstance(menu["inclus"], list):
                        for section in menu["inclus"]:
                            if "items" in section and isinstance(section["items"], list):
                                for item in section["items"]:
                                    if "nom" in item and item["nom"]:
                                        restaurant_signature.append(item["nom"])
                                        if len(restaurant_signature) >= 3:
                                            break
                                if len(restaurant_signature) >= 3:
                                    break
                        if len(restaurant_signature) >= 3:
                            break
            
            # Chercher dans Items Ind√©pendants si on n'a pas encore 3 plats
            if len(restaurant_signature) < 3 and "Items Ind√©pendants" in struct_data and isinstance(struct_data["Items Ind√©pendants"], list):
                for item in struct_data["Items Ind√©pendants"]:
                    if "nom" in item and item["nom"]:
                        restaurant_signature.append(item["nom"])
                        if len(restaurant_signature) >= 3:
                            break
        
        # Si toujours pas de plats, chercher dans le menu standard
        if not restaurant_signature and "menu" in restaurant and isinstance(restaurant["menu"], list):
            for section in restaurant["menu"]:
                if "items" in section and isinstance(section["items"], list):
                    for item in section["items"]:
                        if "name" in item:
                            restaurant_signature.append(item["name"])
                            if len(restaurant_signature) >= 3:
                                break
                    if len(restaurant_signature) >= 3:
                        break
        
        # Trouver l'image du restaurant
        restaurant_image = ""
        image_fields = ["main_image", "photo", "image"]
        
        for field in image_fields:
            if field in restaurant and restaurant[field]:
                restaurant_image = restaurant[field]
                break
                
        # Si pas d'image principale, chercher dans photos
        if not restaurant_image and "photos" in restaurant and isinstance(restaurant["photos"], list) and len(restaurant["photos"]) > 0:
            restaurant_image = restaurant["photos"][0]
        
        # Assurer un avatar par d√©faut correct
        restaurant_avatar = ""
        avatar_fields = ["profile_image", "avatar", "photo"]
        
        for field in avatar_fields:
            if field in restaurant and restaurant[field]:
                restaurant_avatar = restaurant[field]
                break
                
        if not restaurant_avatar or restaurant_avatar.strip() == "":
            restaurant_avatar = "/images/default_restaurant_avatar.png"
        
        # R√©cup√©rer les coordonn√©es de localisation
        restaurant_location = {}
        if "gps_coordinates" in restaurant and restaurant["gps_coordinates"]:
            restaurant_location = restaurant["gps_coordinates"]
        elif "location" in restaurant and restaurant["location"]:
            restaurant_location = restaurant["location"]
        
        # V√©rifier si un post similaire existe d√©j√† r√©cemment (√©viter les doublons)
        try:
            # Utiliser count_documents au lieu de count() sur le curseur
            min_days = DEFAULT_CONFIG["min_days_between_resto_posts"]
            recent_posts_count = db_connections["choice"][COLL_POSTS].count_documents({
                "producer_id": restaurant_id,
                "time_posted": {"$gt": (datetime.now() - timedelta(days=min_days)).isoformat()}
            })
            
            if recent_posts_count > 0:
                logger.info(f"Post similaire trouv√© r√©cemment pour {restaurant_name}, ignor√©.")
                return None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la v√©rification des posts r√©cents: {e}")
        
        # Construire le prompt pour OpenAI GPT-3.5-turbo
        post_prompt = f"""
        R√©dige un post engageant pour les r√©seaux sociaux pour le restaurant "{restaurant_name}".

        Informations sur le restaurant:
        - Nom: {restaurant_name}
        - Type de cuisine: {restaurant_cuisine}
        - Plats signature: {', '.join(restaurant_signature) if restaurant_signature else 'Non sp√©cifi√©'}
        
        Le post doit:
        1. √ätre √©crit √† la premi√®re personne du pluriel (nous) du point de vue du restaurant
        2. √ätre captivant et donner envie de d√©couvrir le restaurant
        3. Inclure des √©mojis pertinents pour la nourriture (üçΩÔ∏è, ü•ò, üç∑, etc.)
        4. Faire entre 300-400 caract√®res maximum
        5. Se terminer par une question ou une incitation √† l'action
        
        N'invente aucune information qui n'est pas fournie. Utilise uniquement les faits donn√©s.
        Supprime toute instruction et ne r√©ponds qu'avec le texte final du post.
        """
        
        # G√©n√©rer le contenu du post
        content = None
        if DEFAULT_CONFIG["ai_enabled"] and openai_client:
            content = generate_post_with_openai(post_prompt, openai_client)
        
        # Si OpenAI √©choue, g√©n√©rer un contenu de secours
        if not content:
            logger.warning(f"‚ö†Ô∏è G√©n√©ration AI (OpenAI) √©chou√©e, utilisation d'un contenu de secours")
            signature_text = f"Nos sp√©cialit√©s: {', '.join(restaurant_signature[:2])}" if restaurant_signature else ""
            content = f"üçΩÔ∏è {restaurant_name} vous accueille pour d√©couvrir notre cuisine {restaurant_cuisine}. {signature_text} Venez nous rendre visite! #food #restaurant"
        
        # Cr√©er le post avec structure conforme √† MongoDB
        post = {
            "content": content,
            "time_posted": datetime.now().isoformat(),
            "author": {
                "id": restaurant_id,
                "name": restaurant_name,
                "avatar": restaurant_avatar
            },
            "producer_id": restaurant_id,
            "isProducerPost": True,
            "isLeisureProducer": False,
            "isBeautyProducer": False,
            "isRestaurationProducer": True,  # Nouveau champ pour identifier clairement les restaurants
            "is_automated": True,
            "is_restaurant_post": True,  # Ajout d'un indicateur clair pour le comptage
            "likes": 0,              # Pour compatibilit√© frontend
            "likes_count": 0,
            "comments": 0,           # Pour compatibilit√© frontend
            "comments_count": 0,
            "interested": False,     # Indique si l'utilisateur actuel est int√©ress√©
            "interested_count": 0, 
            "choice": False,         # Indique si l'utilisateur actuel a choisi
            "choice_count": 0,
            "location": restaurant_location,  # Coordonn√©es pour affichage carte
            "media": []              # Initialiser le tableau media (sera rempli ensuite)
        }
        
        # Ajouter l'image principale si disponible
        if restaurant_image:
            post["media"].append({
                "type": "image",
                "url": restaurant_image,
                "width": 800,
                "height": 600
            })
        
        # Ajouter des images de plats si disponibles
        if "dish_images" in restaurant and isinstance(restaurant["dish_images"], list):
            dish_media = []
            for image_url in restaurant["dish_images"]:
                if image_url:
                    dish_media.append({
                        "type": "image",
                        "url": image_url,
                        "width": 400,
                        "height": 400
                    })
            
            # Ajouter les images de plats au post
            if dish_media:
                post["media"].extend(dish_media[:2])  # Limiter √† 2 images suppl√©mentaires
        # Si pas d'images de plats sp√©cifiques, essayer les photos g√©n√©rales
        elif "photos" in restaurant and isinstance(restaurant["photos"], list) and len(restaurant["photos"]) > 1:
            # Ajouter jusqu'√† 2 photos suppl√©mentaires (en sautant la premi√®re qui est l'image principale)
            for i in range(1, min(3, len(restaurant["photos"]))):
                post["media"].append({
                    "type": "image",
                    "url": restaurant["photos"][i],
                    "width": 400,
                    "height": 400
                })
        
        # Ins√©rer le post dans la base de donn√©es
        post_id = db_connections["choice"][COLL_POSTS].insert_one(post).inserted_id
        logger.info(f"‚úÖ Post cr√©√© avec succ√®s dans la base de donn√©es. ID: {post_id}")
        
        # Mettre √† jour le restaurant avec le post
        try:
            db_connections["restauration"][COLL_PRODUCERS_RESTAURATION].update_one(
                {"_id": ObjectId(restaurant_id)},
                {"$push": {"posts": post_id}}
            )
            logger.info(f"‚úÖ Restaurant {restaurant_id} mis √† jour avec le nouveau post")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la mise √† jour du restaurant: {e}")
        
        return {
            "post_id": str(post_id),
            "restaurant_name": restaurant_name
        }
        
    except Exception as e:
        logger.error(f"Erreur lors de la cr√©ation du post pour restaurant: {e}")
        return None

# --- Fonctions pour les Posts utilisateurs ---

def is_within_distance(user_loc, venue_loc, max_distance_meters=30):
    """
    V√©rifie si deux coordonn√©es GPS sont √† proximit√© l'une de l'autre.
    Utilise une approximation simple (1 degr√© latitude ~ 111km, 1 degr√© longitude ~ 111km*cos(lat))
    
    Parameters:
    user_loc (dict): Localisation de l'utilisateur avec latitude et longitude
    venue_loc (dict or list): Localisation du lieu (structure variable)
    max_distance_meters (int): Distance maximale en m√®tres
    
    Returns:
    bool: True si les coordonn√©es sont proches, False sinon
    """
    try:
        # G√©rer diff√©rents formats de coordonn√©es possibles
        user_lat = user_loc["latitude"] if "latitude" in user_loc else user_loc[1]
        user_lng = user_loc["longitude"] if "longitude" in user_loc else user_loc[0]
        
        venue_lat = None
        venue_lng = None
        
        # Format: {"type": "Point", "coordinates": [lng, lat]}
        if isinstance(venue_loc, dict) and "type" in venue_loc and venue_loc["type"] == "Point":
            venue_lng, venue_lat = venue_loc["coordinates"]
        
        # Format: {"coordinates": [lng, lat]}
        elif isinstance(venue_loc, dict) and "coordinates" in venue_loc:
            if isinstance(venue_loc["coordinates"], list) and len(venue_loc["coordinates"]) >= 2:
                venue_lng, venue_lat = venue_loc["coordinates"]
        
        # Format: {"lat": lat, "lng": lng}
        elif isinstance(venue_loc, dict) and "lat" in venue_loc and "lng" in venue_loc:
            venue_lat = venue_loc["lat"]
            venue_lng = venue_loc["lng"]
        
        # Format: [lng, lat]
        elif isinstance(venue_loc, list) and len(venue_loc) >= 2:
            venue_lng, venue_lat = venue_loc[0], venue_loc[1]
        
        if venue_lat is None or venue_lng is None:
            logger.warning(f"‚ùå Format de coordonn√©es non reconnu: {venue_loc}")
            return False
        
        # Conversion simple des degr√©s en m√®tres
        meters_per_degree_lat = 111000  # 111 km par degr√© de latitude
        meters_per_degree_lng = 111000 * abs(math.cos(math.radians(user_lat)))  # Varie selon la latitude
        
        # Calcul des distances en m√®tres
        distance_lat = abs(user_lat - venue_lat) * meters_per_degree_lat
        distance_lng = abs(user_lng - venue_lng) * meters_per_degree_lng
        
        # Distance euclidienne approximative en m√®tres
        distance = math.sqrt(distance_lat**2 + distance_lng**2)
        
        return distance <= max_distance_meters
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la v√©rification de distance: {e}")
        # En cas d'erreur, on suppose que les lieux ne sont pas proches
        return False

def has_visited_venue(user, venue_id, config):
    """
    V√©rifie si l'utilisateur a visit√© un lieu dans un pass√© r√©cent et y est rest√© assez longtemps
    
    Parameters:
    user (dict): Profil utilisateur avec frequent_locations
    venue_id (str): ID du lieu √† v√©rifier
    config (dict): Configuration avec min_location_duration et max_post_age_days
    
    Returns:
    tuple: (bool, datetime) Visit√© oui/non, et date de la derni√®re visite
    """
    if not "frequent_locations" in user or not user["frequent_locations"]:
        return False, None
    
    min_duration = config["min_location_duration"]
    max_age_days = config["max_post_age_days"]
    now = datetime.now()
    
    for location in user["frequent_locations"]:
        # V√©rifier si c'est le bon lieu
        if location["id"] == venue_id:
            # Parcourir les visites
            if "visits" in location and location["visits"]:
                # Trier les visites par date (la plus r√©cente en premier)
                sorted_visits = sorted(
                    location["visits"], 
                    key=lambda v: datetime.fromisoformat(v["date"]), 
                    reverse=True
                )
                
                for visit in sorted_visits:
                    visit_date = datetime.fromisoformat(visit["date"])
                    visit_duration = visit.get("duration_minutes", 0)
                    
                    # V√©rifier l'√¢ge de la visite
                    age_days = (now - visit_date).days
                    
                    if age_days <= max_age_days and visit_duration >= min_duration:
                        return True, visit_date
    
    return False, None

def determine_venue_category(venue, is_event=False, is_beauty=False):
    """
    D√©termine la cat√©gorie d'√©valuation pour un lieu ou un √©v√©nement
    
    Parameters:
    venue (dict): Document du lieu ou de l'√©v√©nement
    is_event (bool): Si True, c'est un √©v√©nement
    is_beauty (bool): Si True, c'est un lieu de beaut√©
    
    Returns:
    str: Cat√©gorie d'√©valuation
    """
    if is_beauty:
        # Recherche dans la cat√©gorie de lieu de beaut√©
        beauty_category = ""
        
        if "sous_categorie" in venue:
            beauty_category = venue["sous_categorie"].lower() if venue["sous_categorie"] else ""
        elif "category" in venue:
            beauty_category = venue["category"].lower() if venue["category"] else ""
        
        # Parcourir le mappage des lieux de beaut√©
        for key, value in BEAUTY_CATEGORY_MAPPING.items():
            if key.lower() in beauty_category:
                return value
        
        # Par d√©faut pour les lieux de beaut√©
        return "institut_beaute"
    
    elif is_event:
        # Recherche dans la cat√©gorie d'√©v√©nement
        if "cat√©gorie" in venue:
            category = venue["cat√©gorie"].lower() if venue["cat√©gorie"] else ""
        elif "category" in venue:
            category = venue["category"].lower() if venue["category"] else ""
        else:
            category = ""
        
        # Parcourir le mappage des √©v√©nements
        for key, value in EVENT_CATEGORY_MAPPING.items():
            if key.lower() in category:
                return value
        
        # Si cat√©gorie principale est disponible
        if "cat√©gorie_principale" in venue and venue["cat√©gorie_principale"]:
            main_category = venue["cat√©gorie_principale"].lower()
            if main_category in EVENT_CATEGORY_MAPPING:
                return EVENT_CATEGORY_MAPPING[main_category]
        
        return "default"
    else:
        # Recherche dans la cat√©gorie de restaurant
        if "category" in venue and isinstance(venue["category"], list) and venue["category"]:
            for cat in venue["category"]:
                cat_lower = cat.lower()
                if cat_lower in RESTAURANT_CATEGORY_MAPPING:
                    return RESTAURANT_CATEGORY_MAPPING[cat_lower]
        
        # Si cuisine_type est disponible
        if "cuisine_type" in venue and venue["cuisine_type"]:
            cuisine_type = venue["cuisine_type"].lower()
            if cuisine_type in RESTAURANT_CATEGORY_MAPPING:
                return RESTAURANT_CATEGORY_MAPPING[cuisine_type]
        
        return "restaurant"  # Par d√©faut, c'est un restaurant

def generate_rating_data(venue_category, is_positive=True):
    """
    G√©n√®re des donn√©es d'√©valuation (aspects, √©motions, emojis) en fonction de la cat√©gorie
    
    Parameters:
    venue_category (str): Cat√©gorie d'√©valuation
    is_positive (bool): Si l'avis est positif ou n√©gatif
    
    Returns:
    dict: Donn√©es d'√©valuation
    """
    # Obtenir la cat√©gorie ou utiliser "default" si non trouv√©e
    category_data = VENUE_CATEGORIES.get(venue_category, VENUE_CATEGORIES["default"])
    
    # Nombre d'aspects √† √©valuer (entre 2 et 4)
    num_aspects = random.randint(2, min(4, len(category_data["aspects"])))
    
    # S√©lection al√©atoire des aspects
    aspects = random.sample(category_data["aspects"], num_aspects)
    
    # G√©n√©rer des scores
    aspect_scores = {}
    for aspect in aspects:
        if is_positive:
            # Scores positifs : 4 ou 5 sur 5
            score = random.randint(4, 5)
        else:
            # Scores n√©gatifs : 1 √† 3 sur 5
            score = random.randint(1, 3)
        aspect_scores[aspect] = score
    
    # Calcul du score global (moyenne arrondie √† 1 d√©cimale)
    overall_score = round(sum(aspect_scores.values()) / len(aspect_scores), 1)
    
    # S√©lection des √©motions (1 √† 2)
    emotions_key = "emotions_positive" if is_positive else "emotions_negative"
    emotions = random.sample(
        category_data[emotions_key], 
        min(2, len(category_data[emotions_key]))
    )
    
    # S√©lection des emojis (2 √† 4)
    emojis_key = "emojis_positive" if is_positive else "emojis_negative"
    num_emojis = random.randint(2, min(4, len(category_data[emojis_key])))
    emojis = random.sample(category_data[emojis_key], num_emojis)
    
    return {
        "aspect_scores": aspect_scores,
        "overall_score": overall_score,
        "emotions": emotions,
        "emojis": emojis
    }

def get_aspects(category, venue_type="restaurant"):
    """
    R√©cup√®re les aspects pour une cat√©gorie donn√©e
    
    Parameters:
    category (str): Cat√©gorie (restaurant, spa, etc.)
    venue_type (str): Type de lieu (restaurant, event, beauty)
    
    Returns:
    list: Liste des aspects
    """
    if venue_type == "beauty":
        # V√©rifier si la cat√©gorie existe
        if category in VENUE_CATEGORIES:
            return VENUE_CATEGORIES[category]["aspects"]
        else:
            return VENUE_CATEGORIES["default"]["aspects"]
    else:
        # Recherche dans les cat√©gories g√©n√©rales
        if category in VENUE_CATEGORIES:
            return VENUE_CATEGORIES[category]["aspects"]
        else:
            return VENUE_CATEGORIES["default"]["aspects"]

def get_positive_emotions(category, venue_type="restaurant"):
    """
    R√©cup√®re les √©motions positives pour une cat√©gorie donn√©e
    
    Parameters:
    category (str): Cat√©gorie (restaurant, spa, etc.)
    venue_type (str): Type de lieu (restaurant, event, beauty)
    
    Returns:
    list: Liste des √©motions positives
    """
    if venue_type == "beauty":
        # V√©rifier si la cat√©gorie existe
        if category in VENUE_CATEGORIES:
            return VENUE_CATEGORIES[category]["emotions_positive"]
        else:
            return VENUE_CATEGORIES["default"]["emotions_positive"]
    else:
        # Recherche dans les cat√©gories g√©n√©rales
        if category in VENUE_CATEGORIES:
            return VENUE_CATEGORIES[category]["emotions_positive"]
        else:
            return VENUE_CATEGORIES["default"]["emotions_positive"]

def get_negative_emotions(category, venue_type="restaurant"):
    """
    R√©cup√®re les √©motions n√©gatives pour une cat√©gorie donn√©e
    
    Parameters:
    category (str): Cat√©gorie (restaurant, spa, etc.)
    venue_type (str): Type de lieu (restaurant, event, beauty)
    
    Returns:
    list: Liste des √©motions n√©gatives
    """
    if venue_type == "beauty":
        # V√©rifier si la cat√©gorie existe
        if category in VENUE_CATEGORIES:
            return VENUE_CATEGORIES[category]["emotions_negative"]
        else:
            return VENUE_CATEGORIES["default"]["emotions_negative"]
    else:
        # Recherche dans les cat√©gories g√©n√©rales
        if category in VENUE_CATEGORIES:
            return VENUE_CATEGORIES[category]["emotions_negative"]
        else:
            return VENUE_CATEGORIES["default"]["emotions_negative"]

def get_emoji(category, venue_type="restaurant"):
    """
    R√©cup√®re un emoji al√©atoire pour une cat√©gorie donn√©e
    
    Parameters:
    category (str): Cat√©gorie (restaurant, spa, etc.)
    venue_type (str): Type de lieu (restaurant, event, beauty)
    is_positive (bool): Si c'est un avis positif ou n√©gatif
    
    Returns:
    str: Un emoji al√©atoire
    """
    if venue_type == "beauty":
        # Pour les lieux de beaut√©
        if category in VENUE_CATEGORIES:
            emojis = VENUE_CATEGORIES[category]["emojis_positive"]
            return random.choice(emojis) if emojis else "‚ú®"
        else:
            return random.choice(VENUE_CATEGORIES["default"]["emojis_positive"])
    else:
        # Pour les restaurants et √©v√©nements
        if category in VENUE_CATEGORIES:
            emojis = VENUE_CATEGORIES[category]["emojis_positive"]
            return random.choice(emojis) if emojis else "üëç"
        else:
            return random.choice(VENUE_CATEGORIES["default"]["emojis_positive"])

def get_reviews_for_venue(venue, is_event=False, is_beauty=False):
    """
    Extrait jusqu'√† 3 reviews pertinentes selon le type de lieu.
    """
    reviews = []
    if is_beauty and "comments" in venue:
        reviews = [c.get("text", "") for c in venue["comments"] if c.get("text")]
    elif is_event and "commentaires" in venue:
        reviews = [c.get("contenu", "") for c in venue["commentaires"] if c.get("contenu")]
    # Restauration : pas de reviews
    if reviews:
        return random.sample(reviews, min(3, len(reviews)))
    return []

def generate_post_prompt(user, venue, visit_date, rating_data, is_event=False, is_beauty=False):
    """
    G√©n√®re un prompt pour OpenAI GPT-3.5-turbo pour cr√©er un post utilisateur r√©aliste.
    """
    # R√©cup√©ration des noms des lieux/√©v√©nements
    if is_event:
        venue_name = venue.get('intitul√©', venue.get('titre', venue.get('name', '√âv√©nement')))
        venue_type = venue.get('cat√©gorie', venue.get('category', '√©v√©nement'))
        venue_detail = venue.get('d√©tail', venue.get('description', ''))
        venue_location = venue.get('lieu', '')
    elif is_beauty:
        venue_name = venue.get('name', 'Institut de Beaut√©')
        venue_type = venue.get('sous_categorie', venue.get('category', 'lieu de beaut√©'))
        venue_detail = venue.get('description', '')
        venue_location = venue.get('address', '')
    else:
        venue_name = venue.get('name', 'Restaurant')
        venue_type = ', '.join(venue.get('category', [])) if isinstance(venue.get('category', []), list) else venue.get('category', 'restaurant')
        venue_detail = venue.get('description', '')
        venue_location = venue.get('address', '')
    
    # Formater les scores pour le prompt
    aspect_scores_text = ""
    for aspect, score in rating_data["aspect_scores"].items():
        aspect_scores_text += f"- {aspect}: {score}/5\n"
    
    # Formater les √©motions pour le prompt
    emotions_text = ", ".join(rating_data["emotions"])
    
    # Formater la date de visite
    visit_date_str = visit_date.strftime("%d/%m/%Y")
    
    # D√©terminer le type de contenu
    if is_event:
        prompt_type = "un √©v√©nement"
        venue_desc = f"l'√©v√©nement {venue_type}"
    elif is_beauty:
        prompt_type = "un lieu de beaut√© et bien-√™tre"
        venue_desc = f"{venue_type}"
    else:
        prompt_type = "un restaurant"
        venue_desc = f"le restaurant {venue_type}"
    
    # Cr√©er le prompt
    prompt = f"""
    R√©dige un post authentique sur {prompt_type} pour un utilisateur de l'application mobile "Choice".

    Informations sur l'utilisateur:
    - Nom: {user.get('name', 'Utilisateur')}
    - Genre: {user.get('gender', 'Non sp√©cifi√©')}
    
    Informations sur {prompt_type}:
    - Nom: {venue_name}
    - Type: {venue_type}
    - Lieu: {venue_location}
    - Description: {venue_detail[:100] + '...' if len(venue_detail) > 100 else venue_detail}
    
    √âvaluation de l'utilisateur:
    {aspect_scores_text}
    - Note globale: {rating_data["overall_score"]}/5
    - Ressenti: {emotions_text}
    
    Date de la visite: {visit_date_str}
    
    Directives pour le post:
    1. √âcris √† la premi√®re personne (je)
    2. Fais r√©f√©rence √† des √©l√©ments sp√©cifiques de {venue_desc}
    3. Mentionne au moins deux aspects √©valu√©s ci-dessus
    4. Exprime clairement ton ressenti et ta note globale
    5. Inclus quelques-uns de ces √©mojis pertinents: {' '.join(rating_data["emojis"])}
    6. Termine par une recommandation ou non, selon ton √©valuation
    7. Longueur: environ 250-400 caract√®res (concis mais d√©taill√©)
    """
    
    # Ajouter des instructions sp√©cifiques selon le type
    if is_beauty:
        prompt += """
    Vocabulaire sp√©cifique √† inclure dans le post sur le lieu de beaut√©:
    - Parle de "soins", "relaxation", "d√©tente", "bien-√™tre"
    - Utilise des termes comme "ressourcer", "apaiser", "revitaliser"
    - Mentionne l'atmosph√®re, l'ambiance ou le cadre
    - Si positif, √©voque la sensation apr√®s les soins
    - Si n√©gatif, √©voque pr√©cis√©ment ce qui n'a pas fonctionn√©
    """
    
    prompt += """
    Le post doit √™tre authentique, comme si l'utilisateur l'√©crivait r√©ellement sur l'application.
    """
    
    # Ajouter les reviews si disponibles
    reviews = get_reviews_for_venue(venue, is_event, is_beauty)
    if reviews:
        prompt += "\nAvis clients :\n" + "\n".join(f"- {r}" for r in reviews)
    
    return prompt

# Ajout d'une liste de vid√©os de stock pour les posts
STOCK_VIDEO_URLS = [
    "https://samplelib.com/mp4/sample-720p.mp4",
    "https://www.w3schools.com/html/mov_bbb.mp4",
    "https://filesamples.com/samples/video/mp4/sample_640x360.mp4"
]

def create_media_from_venue(venue, is_event=False, is_beauty=False, with_video=False):
    """
    Extrait les m√©dias (images/vid√©os) √† partir d'un document de lieu ou √©v√©nement
    """
    media = []
    # Images (logique existante)
    if is_event:
        if "image" in venue and venue["image"]:
            media.append({"type": "image", "url": venue["image"], "width": 800, "height": 600})
        if "lineup" in venue and isinstance(venue["lineup"], list):
            for artist in venue["lineup"]:
                if isinstance(artist, dict) and "image" in artist and artist["image"]:
                    media.append({"type": "image", "url": artist["image"], "width": 400, "height": 400})
                    if len(media) >= 3:
                        break
    else:
        if "photos" in venue and isinstance(venue["photos"], list) and venue["photos"]:
            for i, photo in enumerate(venue["photos"]):
                if i >= 3:
                    break
                media.append({"type": "image", "url": photo, "width": 800, "height": 600})
        elif "photo" in venue and venue["photo"]:
            media.append({"type": "image", "url": venue["photo"], "width": 800, "height": 600})
        elif "main_image" in venue and venue["main_image"]:
            media.append({"type": "image", "url": venue["main_image"], "width": 800, "height": 600})
    # Vid√©o (optionnelle)
    if with_video:
        # 30% de chance d'ajouter une vid√©o, ou syst√©matique si for√ßage
        if random.random() < 0.3 or with_video is True:
            video_url = random.choice(STOCK_VIDEO_URLS)
            media.append({
                "type": "video",
                "url": video_url,
                "width": 1280,
                "height": 720,
                "duration": 30
            })
    return media

def create_post_for_venue(db_connections, user, venue, is_event=False, is_beauty=False, openai_client=None, config=None, with_video=False):
    """
    Cr√©e un post utilisateur pour un lieu, √©v√©nement ou lieu de beaut√©.
    Utilise OpenAI pour g√©n√©rer le contenu si un client est fourni.
    """
    if config is None:
        config = DEFAULT_CONFIG.copy()
    
    try:
        # V√©rifier si l'utilisateur a visit√© le lieu
        venue_id = str(venue["_id"])
        has_visited, visit_date = has_visited_venue(user, venue_id, config)
        
        if config["verify_location"] and not has_visited:
            logger.info(f"‚ö†Ô∏è L'utilisateur {user['name']} n'a pas visit√© {venue.get('name', venue.get('intitul√©', 'Lieu'))} r√©cemment")
            return None
        
        # Si pas de date de visite (si la v√©rification est d√©sactiv√©e), utiliser une date r√©cente
        if not visit_date:
            days_ago = random.randint(1, config["max_post_age_days"])
            visit_date = datetime.now() - timedelta(days=days_ago)
        
        # D√©terminer la cat√©gorie du lieu
        venue_category = determine_venue_category(venue, is_event, is_beauty)
        
        # D√©terminer si l'avis sera positif ou n√©gatif
        # Pour les lieux de beaut√©, augmenter la probabilit√© d'avis positifs
        good_review_probability = config["good_review_probability"]
        if is_beauty:
            good_review_probability = 0.85  # 85% de chance d'avis positifs pour les lieux de beaut√©
        
        is_positive = random.random() < good_review_probability
        
        # G√©n√©rer les donn√©es d'√©valuation
        rating_data = generate_rating_data(venue_category, is_positive)
        
        # G√©n√©rer le prompt pour OpenAI GPT-3.5-turbo
        prompt = generate_post_prompt(user, venue, visit_date, rating_data, is_event, is_beauty)
        
        # G√©n√©rer le contenu du post
        content = None
        if config.get("ai_enabled", True) and openai_client:
            content = openai_client.generate_text_with_retry(prompt)
        
        # Si OpenAI √©choue ou est d√©sactiv√©, g√©n√©rer un contenu de secours
        if not content:
            logger.warning(f"‚ö†Ô∏è G√©n√©ration AI (OpenAI) √©chou√©e pour {venue_name}, utilisation d'un contenu de secours")
            
            # Extraire le nom du lieu
            venue_name = venue.get('name', venue.get('intitul√©', 'Lieu'))
            
            # G√©n√©rer un d√©but positif ou n√©gatif
            if is_positive:
                if is_beauty:
                    starts = [
                        f"{random.choice(rating_data['emojis'])} Moment de d√©tente chez {venue_name}!",
                        f"{random.choice(rating_data['emojis'])} Exp√©rience bien-√™tre chez {venue_name}!",
                        f"{random.choice(rating_data['emojis'])} Ressourc√©e apr√®s ma visite √† {venue_name}."
                    ]
                else:
                    starts = [
                        f"{random.choice(rating_data['emojis'])} Super exp√©rience √† {venue_name}!",
                        f"{random.choice(rating_data['emojis'])} Je recommande vivement {venue_name}!",
                        f"{random.choice(rating_data['emojis'])} Excellente d√©couverte: {venue_name}."
                    ]
            else:
                if is_beauty:
                    starts = [
                        f"{random.choice(rating_data['emojis'])} D√©√ßu(e) par {venue_name}...",
                        f"{random.choice(rating_data['emojis'])} Exp√©rience mitig√©e chez {venue_name}.",
                        f"{random.choice(rating_data['emojis'])} Pas convaincu(e) par {venue_name}."
                    ]
                else:
                    starts = [
                        f"{random.choice(rating_data['emojis'])} D√©√ßu(e) par {venue_name}...",
                        f"{random.choice(rating_data['emojis'])} Exp√©rience mitig√©e √† {venue_name}.",
                        f"{random.choice(rating_data['emojis'])} Pas convaincu(e) par {venue_name}."
                    ]
            
            # G√©n√©rer un corps incluant un aspect
            aspect, score = random.choice(list(rating_data["aspect_scores"].items()))
            if is_positive:
                if is_beauty:
                    bodies = [
                        f"J'ai particuli√®rement appr√©ci√© {aspect}, tellement relaxant.",
                        f"Le {aspect} √©tait vraiment professionnel et efficace.",
                        f"Mention sp√©ciale pour {aspect}, un vrai moment de bien-√™tre."
                    ]
                else:
                    bodies = [
                        f"J'ai particuli√®rement appr√©ci√© {aspect}.",
                        f"Le {aspect} √©tait vraiment top!",
                        f"Mention sp√©ciale pour {aspect}."
                    ]
            else:
                bodies = [
                    f"Le {aspect} laisse √† d√©sirer.",
                    f"D√©ception sur {aspect}.",
                    f"Le {aspect} n'√©tait pas √† la hauteur."
                ]
            
            # G√©n√©rer une conclusion
            if is_positive:
                if is_beauty:
                    ends = [
                        f"Je reviendrai pour un autre soin! {random.choice(rating_data['emojis'])}",
                        f"√Ä essayer pour un moment de d√©tente. {random.choice(rating_data['emojis'])}",
                        f"Un vrai havre de bien-√™tre! {random.choice(rating_data['emojis'])}"
                    ]
                else:
                    ends = [
                        f"Je reviendrai! {random.choice(rating_data['emojis'])}",
                        f"√Ä essayer absolument. {random.choice(rating_data['emojis'])}",
                        f"Une valeur s√ªre! {random.choice(rating_data['emojis'])}"
                    ]
            else:
                ends = [
                    f"Je ne reviendrai pas. {random.choice(rating_data['emojis'])}",
                    f"√Ä √©viter selon moi. {random.choice(rating_data['emojis'])}",
                    f"Il y a mieux ailleurs. {random.choice(rating_data['emojis'])}"
                ]
            
            # Assembler le contenu
            content = f"{random.choice(starts)} {random.choice(bodies)} {random.choice(ends)}"
        
        # Extraire les m√©dias (images/vid√©os)
        media = create_media_from_venue(venue, is_event, is_beauty, with_video=with_video)
        
        # Cr√©er l'objet post
        user_id = str(user["_id"])
        target_id = venue_id
        
        # D√©terminer le type de cible
        if is_event:
            target_type = "event"
        elif is_beauty:
            target_type = "beauty"
        else:
            target_type = "producer"
        
        # D√©terminer si l'utilisateur a fait un choice
        # Les utilisateurs qui ont des avis positifs ont plus de chances de faire un choice
        made_choice = is_positive and random.random() < 0.8
        
        # Pr√©parer la structure du post
        post = {
            "user_id": user_id,
            "target_id": target_id,
            "target_type": target_type,
            "content": content,
            "media": media,
            "posted_at": datetime.now().isoformat(),
            "location": {
                "name": venue.get('name', venue.get('intitul√©', venue.get('lieu', 'Lieu'))),
                "coordinates": [],
                "address": venue.get('address', venue.get('adresse', ''))
            },
            "likes": [],
            "likes_count": 0,
            "comments": [],
            "comments_count": 0,
            "author": {
                "id": user_id,
                "name": user["name"],
                "avatar": user.get("photo_url", "")
            },
            "rating": rating_data["overall_score"],
            "post_type": target_type
        }
        
        # Ajouter les m√©tadonn√©es sp√©cifiques au type de post
        if is_beauty:
            post["isBeautyPlace"] = True
            post["beauty_id"] = target_id
            post["beauty_name"] = venue.get('name', 'Lieu de beaut√©')
            post["beauty_category"] = venue.get('category', '')
            post["beauty_subcategory"] = venue.get('sous_categorie', '')
        elif is_event:
            post["isEvent"] = True
            post["event_id"] = target_id
            post["event_title"] = venue.get('intitul√©', venue.get('titre', venue.get('name', '√âv√©nement')))
        else:
            post["isRestaurant"] = True
            post["restaurant_id"] = target_id
            post["restaurant_name"] = venue.get('name', 'Restaurant')
        
        # Ajouter les coordonn√©es selon leur format
        if is_event and "location" in venue and "coordinates" in venue["location"]:
            post["location"]["coordinates"] = venue["location"]["coordinates"]
        elif "gps_coordinates" in venue:
            if "coordinates" in venue["gps_coordinates"]:
                post["location"]["coordinates"] = venue["gps_coordinates"]["coordinates"]
            elif "lat" in venue["gps_coordinates"] and "lng" in venue["gps_coordinates"]:
                post["location"]["coordinates"] = [venue["gps_coordinates"]["lng"], venue["gps_coordinates"]["lat"]]
        
        # Ins√©rer le post dans la base de donn√©es
        post_id = db_connections["choice"][COLL_POSTS].insert_one(post).inserted_id
        
        logger.info(f"‚úÖ Post cr√©√© avec succ√®s pour {user['name']} sur {post['location']['name']} (ID: {post_id})")
        
        # Mettre √† jour la liste des posts de l'utilisateur
        try:
            db_connections["choice"][COLL_USERS].update_one(
                {"_id": ObjectId(user_id)},
                {"$push": {"posts": str(post_id)}}
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la mise √† jour de l'utilisateur: {e}")
        
        # Si l'utilisateur a fait un choice, mettre √† jour les documents correspondants
        if made_choice:
            try:
                if is_event:
                    # Ajouter le choice √† l'√©v√©nement
                    db_connections["loisir"][COLL_EVENTS_LOISIR].update_one(
                        {"_id": ObjectId(target_id)},
                        {"$push": {"choices": user_id}}
                    )
                elif is_beauty:
                    # Ajouter le choice au lieu de beaut√©
                    db_connections["beauty"][COLL_BEAUTY_PLACES].update_one(
                        {"_id": ObjectId(target_id)},
                        {"$inc": {"choice_count": 1}}
                    )
                else:
                    # Ajouter le choice au restaurant
                    db_connections["restauration"][COLL_PRODUCERS_RESTAURATION].update_one(
                        {"_id": ObjectId(target_id)},
                        {"$inc": {"choice": 1}}
                    )
                
                # Ajouter √©galement le choice √† l'utilisateur
                db_connections["choice"][COLL_USERS].update_one(
                    {"_id": ObjectId(user_id)},
                    {"$push": {"choices": target_id}}
                )
                
                logger.info(f"‚úÖ Choice ajout√© pour {user['name']} sur {post['location']['name']}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur lors de l'ajout du choice: {e}")
        
        return {
            "post_id": str(post_id),
            "user_name": user["name"],
            "venue_name": post["location"]["name"],
            "is_choice": made_choice,
            "post_type": target_type
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation du post: {e}")
        return None

def generate_user_posts(db_connections, count, openai_client=None, config=None):
    """G√©n√®re des posts pour les utilisateurs en fonction de leurs localisations fr√©quentes"""
    if config is None:
        config = DEFAULT_CONFIG.copy()
    
    try:
        # R√©cup√©rer les utilisateurs qui ont des localisations fr√©quentes
        user_query = {
            "frequent_locations": {"$exists": True, "$ne": []}
        }
        
        # Limiter le nombre d'utilisateurs si sp√©cifi√©
        user_limit = config.get("max_users")
        
        users = list(db_connections["choice"][COLL_USERS].find(user_query).limit(user_limit if user_limit else 0))
        
        if not users:
            logger.warning("‚ùå Aucun utilisateur avec des localisations fr√©quentes trouv√©")
            return []
        
        logger.info(f"üîç {len(users)} utilisateurs avec des localisations fr√©quentes trouv√©s")
        
        # V√©rifier que le nombre de posts demand√© est r√©alisable
        posts_count = min(count, len(users))
        if posts_count < count:
            logger.warning(f"‚ö†Ô∏è Nombre de posts demand√© ({count}) sup√©rieur au nombre d'utilisateurs disponibles ({len(users)})")
            logger.warning(f"‚ö†Ô∏è G√©n√©ration limit√©e √† {posts_count} posts")
        
        # S√©lectionner al√©atoirement des utilisateurs
        selected_users = random.sample(users, posts_count)
        
        # Liste pour stocker les posts cr√©√©s
        generated_posts = []
        
        # Pour chaque utilisateur, cr√©er un post
        for user in selected_users:
            logger.info(f"üîÑ G√©n√©ration de post pour {user['name']}")
            
            # D√©cider si on cr√©e un post pour un restaurant, un √©v√©nement ou un lieu de beaut√©
            # V√©rifier si l'utilisateur a un int√©r√™t pour le bien-√™tre
            has_wellness_interest = any(tag in ["spa", "massage", "soins", "beaut√©", "bien-√™tre"] for tag in user.get("liked_tags", []))
            
            # Augmenter les chances de posts wellness si l'utilisateur s'y int√©resse
            if has_wellness_interest:
                post_type_weights = {"event": 0.3, "beauty": 0.4, "restaurant": 0.3}
            else:
                post_type_weights = {"event": 0.4, "beauty": 0.2, "restaurant": 0.4}
            
            post_type = random.choices(
                list(post_type_weights.keys()),
                weights=list(post_type_weights.values()),
                k=1
            )[0]
            
            # Selon le type de post choisi
            if post_type == "event":
                # R√©cup√©rer les lieux fr√©quents de type loisir
                frequent_locations = user.get("frequent_locations", [])
                leisure_locations = [loc for loc in frequent_locations if loc.get("type") == "leisure"]
                
                if not leisure_locations:
                    logger.info(f"‚ö†Ô∏è Aucun lieu de loisir fr√©quent√© par {user['name']}, essai de fallback")
                    # Fallback sur un autre type de post
                    if has_wellness_interest:
                        post_type = "beauty"
                    else:
                        post_type = "restaurant"
                else:
                    # S√©lectionner une localisation al√©atoire
                    location = random.choice(leisure_locations)
                    location_id = location.get("id")
                    
                    # R√©cup√©rer l'√©v√©nement correspondant
                    event = db_connections["loisir"][COLL_EVENTS_LOISIR].find_one({"_id": ObjectId(location_id)})
                    
                    if event:
                        # Cr√©er le post
                        post_result = create_post_for_venue(
                            db_connections, user, event, is_event=True, is_beauty=False, openai_client=openai_client, config=config
                        )
                        
                        if post_result:
                            generated_posts.append(post_result)
                            continue
                    
                    # Si on arrive ici, c'est qu'on n'a pas pu cr√©er de post d'√©v√©nement
                    # On va essayer avec un autre type de post
                    if has_wellness_interest:
                        post_type = "beauty"
                    else:
                        post_type = "restaurant"
            
            # Si post_type est beauty √† ce stade (soit directement, soit par fallback)
            if post_type == "beauty":
                # R√©cup√©rer les lieux fr√©quents de type beaut√©
                frequent_locations = user.get("frequent_locations", [])
                beauty_locations = [loc for loc in frequent_locations if loc.get("type") == "beauty"]
                
                if not beauty_locations:
                    logger.info(f"‚ö†Ô∏è Aucun lieu de beaut√© fr√©quent√© par {user['name']}, fallback sur restaurant")
                    post_type = "restaurant"
                else:
                    # S√©lectionner une localisation al√©atoire
                    location = random.choice(beauty_locations)
                    location_id = location.get("id")
                    
                    # R√©cup√©rer le lieu de beaut√© correspondant
                    beauty_place = db_connections["beauty"][COLL_BEAUTY_PLACES].find_one({"_id": ObjectId(location_id)})
                    
                    if beauty_place:
                        # Cr√©er le post
                        post_result = create_post_for_venue(
                            db_connections, user, beauty_place, is_event=False, is_beauty=True, openai_client=openai_client, config=config
                        )
                        
                        if post_result:
                            generated_posts.append(post_result)
                            continue
                    
                    # Si on arrive ici, fallback sur restaurant
                    post_type = "restaurant"
            
            # Si post_type est restaurant √† ce stade (soit directement, soit par fallback)
            if post_type == "restaurant":
                # R√©cup√©rer les lieux fr√©quents de type restaurant
                frequent_locations = user.get("frequent_locations", [])
                restaurant_locations = [loc for loc in frequent_locations if loc.get("type") == "restaurant"]
                
                if not restaurant_locations:
                    logger.info(f"‚ö†Ô∏è Aucun restaurant fr√©quent√© par {user['name']}, impossible de cr√©er un post")
                    continue
                
                # S√©lectionner une localisation al√©atoire
                location = random.choice(restaurant_locations)
                location_id = location.get("id")
                
                # R√©cup√©rer le restaurant correspondant
                restaurant = db_connections["restauration"][COLL_PRODUCERS_RESTAURATION].find_one({"_id": ObjectId(location_id)})
                
                if restaurant:
                    # Cr√©er le post
                    post_result = create_post_for_venue(
                        db_connections, user, restaurant, is_event=False, is_beauty=False, openai_client=openai_client, config=config
                    )
                    
                    if post_result:
                        generated_posts.append(post_result)
        
        return generated_posts
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration des posts: {e}")
        return []

# --- Fonctions g√©n√©rales pour l'ex√©cution ---

def is_within_active_hours():
    """V√©rifie si l'heure actuelle est dans la plage des heures actives."""
    now = datetime.now()
    start_hour = 3  # 3h du matin
    end_hour = 7    # 7h du matin
    
    return start_hour <= now.hour < end_hour

def generate_event_posts(db_connections, count, openai_client=None):
    """G√©n√®re des posts avec r√©f√©rence √† des √©v√©nements √† venir"""
    logger.info(f"üóìÔ∏è G√©n√©ration de {count} posts avec r√©f√©rence √† des √©v√©nements √† venir...")
    
    try:
        # V√©rifier que les collections existent
        if COLL_EVENTS_LOISIR not in db_connections["loisir"].list_collection_names():
            logger.warning(f"‚ùå Collection {COLL_EVENTS_LOISIR} non trouv√©e dans la base de donn√©es loisir")
            if BYPASS_FILTERS:
                logger.info("‚ö†Ô∏è Mode bypass activ√©, cr√©ation d'√©v√©nements fictifs pour test")
                # Cr√©er des √©v√©nements fictifs pour les tests
                mock_events = [
                    {
                        "_id": ObjectId(),
                        "intitul√©": "Concert de Jazz",
                        "d√©tail": "Une soir√©e jazz exceptionnelle avec les meilleurs artistes",
                        "cat√©gorie": "concert",
                        "prochaines_dates": "ven 20 mars",
                        "lieu": "Le Blue Note",
                        "location": {"adresse": "15 rue de la Musique, Paris"}
                    },
                    {
                        "_id": ObjectId(),
                        "intitul√©": "Festival de Th√©√¢tre",
                        "d√©tail": "D√©couvrez les nouvelles pi√®ces de th√©√¢tre contemporain",
                        "cat√©gorie": "th√©√¢tre",
                        "prochaines_dates": "sam 15 avr.",
                        "lieu": "Th√©√¢tre du Marais",
                        "location": {"adresse": "25 rue du Temple, Paris"}
                    }
                ]
                logger.info(f"‚úÖ {len(mock_events)} √©v√©nements fictifs cr√©√©s pour test")
                
                # R√©cup√©rer ou cr√©er des lieux fictifs
                leisure_venues = []
                try:
                    if COLL_VENUES_LOISIR in db_connections["loisir"].list_collection_names():
                        leisure_venues = list(db_connections["loisir"][COLL_VENUES_LOISIR].find().limit(3))
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur lors de la r√©cup√©ration des lieux: {e}")
                
                if not leisure_venues:
                    leisure_venues = [
                        {
                            "_id": ObjectId(),
                            "name": "Le Club de Jazz",
                            "photo": "/images/default_venue_avatar.png"
                        },
                        {
                            "_id": ObjectId(),
                            "name": "Th√©√¢tre Municipal",
                            "photo": "/images/default_venue_avatar.png"
                        }
                    ]
                
                # G√©n√©rer des posts avec les donn√©es fictives
                posts_created = []
                for _ in range(min(count, len(mock_events))):
                    # S√©lectionner un √©v√©nement et un lieu al√©atoirement
                    event = random.choice(mock_events)
                    venue = random.choice(leisure_venues)
                    
                    logger.info(f"ü§ñ G√©n√©ration de post pour test avec √©v√©nement fictif: {event['intitul√©']}")
                    
                    # Cr√©er un post fictif 
                    post = {
                        "post_id": f"mock_{datetime.now().timestamp()}",
                        "event_title": event["intitul√©"],
                        "venue_name": venue.get("name", "Lieu Culturel Test")
                    }
                    posts_created.append(post)
                
                return posts_created
            else:
                return []
        
        events_collection = db_connections["loisir"][COLL_EVENTS_LOISIR]
        
        # R√©cup√©rer les √©v√©nements avec debug info
        logger.info(f"üîç Recherche d'√©v√©nements dans la collection {COLL_EVENTS_LOISIR}...")
        
        try:
            all_events = []
            cursor = events_collection.find({})
            for event in cursor:
                all_events.append(event)
                # Afficher quelques d√©tails du premier √©v√©nement
                if len(all_events) == 1:
                    logger.info(f"üìù Exemple d'√©v√©nement trouv√©: {event.get('_id')}")
                    # Afficher les champs cl√©s disponibles
                    for field in ["intitul√©", "titre", "name", "d√©tail", "prochaines_dates", "date_fin"]:
                        if field in event:
                            logger.info(f"  ‚Ä¢ {field}: {event.get(field, '(vide)')[:50]}...")
            
            logger.info(f"üîç {len(all_events)} √©v√©nements r√©cup√©r√©s pour analyse")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des √©v√©nements: {str(e)}")
            if BYPASS_FILTERS:
                logger.info("‚ö†Ô∏è Mode bypass activ√©, cr√©ation d'√©v√©nements fictifs apr√®s erreur")
                # Cr√©er des √©v√©nements fictifs en cas d'erreur
                all_events = [
                    {
                        "_id": ObjectId(),
                        "intitul√©": "Concert de Jazz (fictif)",
                        "d√©tail": "√©v√©nement fictif pour test suite √† une erreur",
                        "cat√©gorie": "concert",
                        "prochaines_dates": "ven 20 mars"
                    }
                ]
            else:
                return []
            
        if not all_events:
            logger.warning("‚ùå Aucun √©v√©nement trouv√© dans la base de donn√©es")
            if BYPASS_FILTERS:
                logger.info("‚ö†Ô∏è Mode bypass activ√©, cr√©ation d'√©v√©nements fictifs car aucun trouv√©")
                # Cr√©er des √©v√©nements fictifs pour les tests
                all_events = [
                    {
                        "_id": ObjectId(),
                        "intitul√©": "Exposition d'Art (fictif)",
                        "d√©tail": "√©v√©nement fictif pour test car aucun trouv√©",
                        "cat√©gorie": "exposition",
                        "prochaines_dates": "mar 10 mai"
                    }
                ]
            else:
                return []
        
        # Si BYPASS_FILTERS est activ√©, utiliser tous les √©v√©nements
        if BYPASS_FILTERS:
            logger.info("‚ö†Ô∏è Mode bypass activ√©, utilisation de tous les √©v√©nements sans filtrage")
            # Prenons un √©chantillon al√©atoire pour la diversit√©
            if len(all_events) > count * 3:
                valid_events = random.sample(all_events, count * 3)
            else:
                valid_events = all_events
            logger.info(f"‚úÖ {len(valid_events)} √©v√©nements s√©lectionn√©s en mode bypass")
        else:
            # Filtrer les √©v√©nements qui ne sont pas termin√©s
            valid_events = [event for event in all_events if not is_event_ended(event)]
            logger.info(f"‚úÖ {len(valid_events)} √©v√©nements valides apr√®s filtrage par date")
            
            # Si aucun √©v√©nement valide, utiliser les plus r√©cents
            if not valid_events and all_events:
                logger.warning("‚ö†Ô∏è Aucun √©v√©nement valide apr√®s filtrage - utilisation des √©v√©nements r√©cents")
                # Trier par date d'ajout si disponible (chercher parmi diff√©rents noms de champs possibles)
                date_fields = ["dateAjout", "created_at", "date_creation", "date_ajout"]
                sort_field = None
                
                for field in date_fields:
                    if any(field in event for event in all_events):
                        sort_field = field
                        break
                
                if sort_field:
                    all_events.sort(key=lambda x: x.get(sort_field, ""), reverse=True)
                
                valid_events = all_events[:min(10, len(all_events))]
                logger.info(f"‚úÖ Utilisation de {len(valid_events)} √©v√©nements r√©cents")
        
        # R√©cup√©rer des lieux de loisir
        leisure_venues = list(db_connections["loisir"][COLL_VENUES_LOISIR].find({}))
        
        if not leisure_venues:
            logger.warning("‚ùå Aucun lieu de loisir trouv√©, g√©n√©ration de posts impossible.")
            return []
        
        # G√©n√©rer des posts
        posts_created = []
        for _ in range(min(count, len(valid_events))):
            # S√©lectionner un √©v√©nement et un lieu al√©atoirement
            event = random.choice(valid_events)
            venue = random.choice(leisure_venues)
            
            logger.info(f"ü§ñ G√©n√©ration de post pour un leisure avec √©v√©nement r√©f√©renc√©...")
            
            # Cr√©er le post
            result = create_post_for_event(db_connections, event, venue, openai_client)
            if result:
                posts_created.append(result)
                # Afficher le nom de l'√©v√©nement avec diff√©rents champs possibles
                event_title = None
                for field in ["intitul√©", "titre", "name", "title"]:
                    if field in event and event[field]:
                        event_title = event[field]
                        break
                logger.info(f"‚úÖ Post g√©n√©r√© pour l'√©v√©nement: {event_title or 'Sans titre'} via {venue.get('name', 'Lieu inconnu')}")
        
        return posts_created
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration des posts pour √©v√©nements: {e}")
        return []

def generate_restaurant_posts(db_connections, count, openai_client=None):
    """G√©n√®re des posts pour des restaurants populaires"""
    logger.info(f"üçΩÔ∏è G√©n√©ration de {count} posts pour des restaurants populaires...")
    
    try:
        # V√©rifier que les collections existent
        if COLL_PRODUCERS_RESTAURATION not in db_connections["restauration"].list_collection_names():
            logger.warning(f"‚ùå Collection {COLL_PRODUCERS_RESTAURATION} non trouv√©e dans la base restauration")
            if BYPASS_FILTERS:
                logger.info("‚ö†Ô∏è Mode bypass activ√©, cr√©ation de restaurants fictifs pour test")
                # Cr√©er des restaurants fictifs pour les tests
                mock_restaurants = [
                    {
                        "_id": ObjectId(),
                        "name": "Le Bistrot Parisien",
                        "cuisine_type": "Fran√ßaise",
                        "photo": "/images/default_restaurant_avatar.png"
                    },
                    {
                        "_id": ObjectId(),
                        "name": "Sushi Sakura",
                        "cuisine_type": "Japonaise",
                        "photo": "/images/default_restaurant_avatar.png"
                    }
                ]
                logger.info(f"‚úÖ {len(mock_restaurants)} restaurants fictifs cr√©√©s pour test")
                
                # G√©n√©rer des posts avec les donn√©es fictives
                posts_created = []
                for _ in range(min(count, len(mock_restaurants))):
                    restaurant = random.choice(mock_restaurants)
                    
                    logger.info(f"ü§ñ G√©n√©ration de post pour test avec restaurant fictif: {restaurant['name']}")
                    
                    # Cr√©er un post fictif
                    post = {
                        "post_id": f"mock_{datetime.now().timestamp()}",
                        "restaurant_name": restaurant["name"]
                    }
                    posts_created.append(post)
                
                return posts_created
            else:
                return []
        
        restaurant_collection = db_connections["restauration"][COLL_PRODUCERS_RESTAURATION]
        
        # Compter le nombre total de restaurants
        try:
            total_restaurants = restaurant_collection.count_documents({})
            logger.info(f"üìä Nombre total de restaurants: {total_restaurants}")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du comptage des restaurants: {e}")
            total_restaurants = 0
        
        if total_restaurants == 0:
            logger.warning("‚ùå Aucun restaurant trouv√© dans la collection")
            if BYPASS_FILTERS:
                logger.info("‚ö†Ô∏è Mode bypass activ√©, cr√©ation de restaurants fictifs car aucun trouv√©")
                # Cr√©er des restaurants fictifs pour les tests
                mock_restaurants = [
                    {
                        "_id": ObjectId(),
                        "name": "Le Bistrot Parisien (fictif)",
                        "cuisine_type": "Fran√ßaise"
                    }
                ]
                # G√©n√©rer des posts avec les donn√©es fictives
                posts_created = []
                for restaurant in mock_restaurants:
                    post = {
                        "post_id": f"mock_{datetime.now().timestamp()}",
                        "restaurant_name": restaurant["name"]
                    }
                    posts_created.append(post)
                return posts_created
            else:
                return []
        
        # Debug: Afficher les premiers restaurants pour analyse
        sample_restaurants = list(restaurant_collection.find().limit(2))
        if sample_restaurants:
            logger.info(f"üìù Exemples de restaurants trouv√©s:")
            for i, r in enumerate(sample_restaurants):
                logger.info(f"  ‚Ä¢ Restaurant {i+1}: {r.get('name', '(sans nom)')} (ID: {r.get('_id')})")
                for field in ["active", "photo", "profile_image", "cuisine_type"]:
                    if field in r:
                        logger.info(f"    - {field}: {r.get(field)}")
        
        # Si BYPASS_FILTERS est activ√©, ne pas utiliser de filtre
        if BYPASS_FILTERS:
            logger.info(f"‚ö†Ô∏è Mode bypass activ√© pour les restaurants")
            try:
                # R√©cup√©rer des restaurants sans filtre - ACC√àS DIRECT SANS AGGREGATION
                # Utilisation de $sample via aggregate pour la s√©lection al√©atoire, m√™me en mode bypass
                restaurants = list(restaurant_collection.aggregate([
                    {"$sample": {"size": max(1, count * 3)}}
                ], allowDiskUse=True))
                logger.info(f"‚úÖ {len(restaurants)} restaurants r√©cup√©r√©s sans filtre (m√©thode directe avec sample)")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la r√©cup√©ration directe des restaurants (avec sample): {str(e)}")
                restaurants = []
        else:
            # V√©rifier si le champ active existe dans au moins un document
            try:
                has_active_field = restaurant_collection.find_one({"active": {"$exists": True}})
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la v√©rification du champ 'active': {e}")
                has_active_field = None
            
            # Adapter la requ√™te en fonction de la pr√©sence du champ active
            if has_active_field:
                logger.info("üìã Utilisation du filtre 'active: true' pour les restaurants")
                try:
                    restaurants = list(restaurant_collection.aggregate([
                        {"$match": {"active": True}},
                        {"$sample": {"size": max(1, count * 3)}}
                    ], allowDiskUse=True))
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des restaurants actifs: {e}")
                    restaurants = []
            else:
                logger.warning("‚ö†Ô∏è Le champ 'active' n'existe pas - r√©cup√©ration sans filtre")
                try:
                    restaurants = list(restaurant_collection.aggregate([
                        {"$sample": {"size": max(1, count * 3)}}
                    ], allowDiskUse=True))
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des restaurants: {e}")
                    restaurants = []
        
        if not restaurants:
            logger.warning("‚ùå Aucun restaurant trouv√© avec les crit√®res actuels")
            # Derni√®re tentative: r√©cup√©rer n'importe quel document
            try:
                restaurants = list(restaurant_collection.find().limit(count))
                if restaurants:
                    logger.info(f"‚úÖ {len(restaurants)} restaurants r√©cup√©r√©s en dernier recours")
                else:
                    logger.error("‚ùå Impossible de trouver des restaurants m√™me sans filtre")
                    return []
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la derni√®re tentative de r√©cup√©ration: {e}")
                return []
        
        # G√©n√©rer des posts
        posts_created = []
        for i in range(min(count, len(restaurants))):
            restaurant = restaurants[i]
            
            logger.info(f"ü§ñ G√©n√©ration de post pour un restaurant...")
            
            # Cr√©er le post
            result = create_post_for_restaurant(db_connections, restaurant, openai_client)
            if result:
                posts_created.append(result)
                logger.info(f"‚úÖ Post g√©n√©r√© pour le restaurant: {restaurant.get('name', 'Sans nom')}")
        
        return posts_created
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration des posts pour restaurants: {e}")
        return []

def generate_beauty_posts(db_connections, count, openai_client=None):
    """G√©n√®re des posts pour des lieux de beaut√© et bien-√™tre"""
    logger.info(f"‚ú® G√©n√©ration de {count} posts pour des lieux de beaut√© et bien-√™tre...")
    
    try:
        # V√©rifier que les collections existent
        if COLL_BEAUTY_PLACES not in db_connections["beauty"].list_collection_names():
            logger.warning(f"‚ùå Collection {COLL_BEAUTY_PLACES} non trouv√©e dans la base Beauty_Wellness")
            if BYPASS_FILTERS:
                logger.info("‚ö†Ô∏è Mode bypass activ√©, cr√©ation de lieux de beaut√© fictifs pour test")
                # Cr√©er des lieux fictifs pour les tests
                mock_places = [
                    {
                        "_id": ObjectId(),
                        "name": "Spa Zen",
                        "category": "Soins esth√©tiques et bien-√™tre",
                        "sous_categorie": "Spa",
                        "profile_photo": "/images/default_beauty_avatar.png"
                    },
                    {
                        "_id": ObjectId(),
                        "name": "Institut Beaut√© Parfaite",
                        "category": "Soins esth√©tiques et bien-√™tre",
                        "sous_categorie": "Institut de beaut√©",
                        "profile_photo": "/images/default_beauty_avatar.png"
                    }
                ]
                logger.info(f"‚úÖ {len(mock_places)} lieux de beaut√© fictifs cr√©√©s pour test")
                
                # G√©n√©rer des posts avec les donn√©es fictives
                posts_created = []
                for _ in range(min(count, len(mock_places))):
                    place = random.choice(mock_places)
                    
                    logger.info(f"ü§ñ G√©n√©ration de post pour test avec lieu de beaut√© fictif: {place['name']}")
                    
                    # Cr√©er un post fictif
                    post = {
                        "post_id": f"mock_{datetime.now().timestamp()}",
                        "beauty_name": place["name"]
                    }
                    posts_created.append(post)
                
                return posts_created
            else:
                return []
        
        beauty_collection = db_connections["beauty"][COLL_BEAUTY_PLACES]
        
        # Compter le nombre total de lieux de beaut√©
        try:
            total_places = beauty_collection.count_documents({})
            logger.info(f"üìä Nombre total de lieux de beaut√©: {total_places}")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du comptage des lieux de beaut√©: {e}")
            total_places = 0
        
        if total_places == 0:
            logger.warning("‚ùå Aucun lieu de beaut√© trouv√© dans la collection")
            if BYPASS_FILTERS:
                logger.info("‚ö†Ô∏è Mode bypass activ√©, cr√©ation de lieux de beaut√© fictifs car aucun trouv√©")
                # Cr√©er des lieux fictifs pour les tests
                mock_places = [
                    {
                        "_id": ObjectId(),
                        "name": "Salon Beaut√© (fictif)",
                        "category": "Soins esth√©tiques et bien-√™tre"
                    }
                ]
                # G√©n√©rer des posts avec les donn√©es fictives
                posts_created = []
                for place in mock_places:
                    post = {
                        "post_id": f"mock_{datetime.now().timestamp()}",
                        "beauty_name": place["name"]
                    }
                    posts_created.append(post)
                return posts_created
            else:
                return []
        
        # Debug: Afficher les premiers lieux pour analyse
        sample_places = list(beauty_collection.find().limit(2))
        if sample_places:
            logger.info(f"üìù Exemples de lieux de beaut√© trouv√©s:")
            for i, p in enumerate(sample_places):
                logger.info(f"  ‚Ä¢ Lieu {i+1}: {p.get('name', '(sans nom)')} (ID: {p.get('_id')})")
                for field in ["category", "sous_categorie", "profile_photo", "average_score"]:
                    if field in p:
                        logger.info(f"    - {field}: {p.get(field)}")
        
        # Filtrer les lieux par note si BYPASS_FILTERS n'est pas activ√©
        if BYPASS_FILTERS:
            logger.info(f"‚ö†Ô∏è Mode bypass activ√© pour les lieux de beaut√©")
            try:
                # R√©cup√©rer des lieux sans filtre
                beauty_places = list(beauty_collection.find().limit(count * 3))
                logger.info(f"‚úÖ {len(beauty_places)} lieux de beaut√© r√©cup√©r√©s sans filtre")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des lieux de beaut√©: {str(e)}")
                return []
        else:
            # R√©cup√©rer tous les lieux de beaut√© sans filtre sur la note
            try:
                beauty_places = list(beauty_collection.find().limit(count * 3))
                logger.info(f"‚úÖ {len(beauty_places)} lieux de beaut√© r√©cup√©r√©s")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la r√©cup√©ration des lieux de beaut√©: {e}")
                return []
        
        if not beauty_places:
            logger.warning("‚ùå Aucun lieu de beaut√© trouv√© avec les crit√®res actuels")
            return []
        
        # G√©n√©rer des posts
        posts_created = []
        for i in range(min(count, len(beauty_places))):
            place = beauty_places[i]
            
            logger.info(f"ü§ñ G√©n√©ration de post pour un lieu de beaut√©...")
            
            # Cr√©er le post
            result = create_post_for_beauty_place(db_connections, place, openai_client)
            if result:
                posts_created.append(result)
                logger.info(f"‚úÖ Post g√©n√©r√© pour le lieu de beaut√©: {place.get('name', 'Sans nom')}")
        
        return posts_created
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la g√©n√©ration des posts pour lieux de beaut√©: {e}")
        return []

def generate_all_posts(db_connections, config, openai_client=None):
    """
    G√©n√®re tous les types de posts (utilisateurs, producteurs, beaut√©, etc.) selon la config
    """
    all_posts = []
    # G√©n√©ration des posts utilisateurs
    user_posts = generate_user_posts(db_connections, config.get("user_posts_count", 5), openai_client, config)
    all_posts.extend(user_posts)
    # G√©n√©ration des posts producteurs (√©v√©nements)
    event_posts = generate_event_posts(db_connections, config.get("event_posts_count", 3), openai_client)
    all_posts.extend(event_posts)
    # G√©n√©ration des posts producteurs (restaurants)
    restaurant_posts = generate_restaurant_posts(db_connections, config.get("restaurant_posts_count", 2), openai_client)
    all_posts.extend(restaurant_posts)
    # G√©n√©ration des posts beaut√©/wellness
    beauty_posts = generate_beauty_posts(db_connections, config.get("beauty_posts_count", 2), openai_client)
    all_posts.extend(beauty_posts)
    return all_posts

def run_generator(config=None, openai_client=None):
    """Ex√©cute le g√©n√©rateur de posts en continu"""
    if config is None:
        config = DEFAULT_CONFIG.copy()
    
    # Mettre √† jour la configuration globale
    for key, value in config.items():
        if key in DEFAULT_CONFIG:
            DEFAULT_CONFIG[key] = value
    
    # √âtablir les connexions MongoDB
    db_connections = get_db_connections(config.get("mongo_uri"))
    
    # Initialiser OpenAI GPT-3.5-turbo si ce n'est pas d√©j√† fait
    if openai_client is None and DEFAULT_CONFIG["ai_enabled"]:
        try:
            openai_client = OpenAIClient()
            logger.info("‚úÖ Client OpenAI initialis√©.")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation du client OpenAI: {e}")
            logger.warning("‚ö†Ô∏è D√©sactivation de la g√©n√©ration AI.")
            config["ai_enabled"] = False # Forcer la d√©sactivation si l'init √©choue
    
    # R√©cup√©rer le dernier checkpoint
    checkpoint = load_checkpoint("last_run")
    last_run = checkpoint.get("timestamp") if checkpoint else None
    
    logger.info("üöÄ D√©marrage du g√©n√©rateur de posts automatiques avec OpenAI GPT-3.5-turbo")
    logger.info(f"‚è∞ Heures actives: {DEFAULT_CONFIG['active_hours_start']}h-{DEFAULT_CONFIG['active_hours_end']}h")
    
    if last_run:
        logger.info(f"üìù Derni√®re ex√©cution: {last_run}")
    
    try:
        while True:
            # V√©rifier si nous sommes dans les heures actives
            if not is_within_active_hours():
                logger.info(f"üí§ Heure actuelle ({datetime.now().hour}h) hors plage active ({DEFAULT_CONFIG['active_hours_start']}h-{DEFAULT_CONFIG['active_hours_end']}h). Attente...")
                time.sleep(600)  # Attendre 10 minutes
                continue
            
            # G√©n√©rer les posts
            posts = generate_all_posts(db_connections, DEFAULT_CONFIG, openai_client)
            
            # Sauvegarder le checkpoint
            save_checkpoint("last_run", {
                "timestamp": datetime.now().isoformat(),
                "posts_generated": len(posts),
                "posts": posts
            })
            
            # Pause entre les g√©n√©rations
            sleep_time = DEFAULT_CONFIG["sleep_time"] + random.randint(-60, 60)  # Ajouter un peu d'al√©atoire
            logger.info(f"‚è±Ô∏è Planification de la prochaine g√©n√©ration dans {sleep_time // 60} minutes")
            
            next_run = datetime.now() + timedelta(seconds=sleep_time)
            logger.info(f"üîÑ Ex√©cution planifi√©e √† {next_run.strftime('%H:%M:%S')}: G√©n√©ration de posts al√©atoires")
            
            time.sleep(sleep_time)
            
    except KeyboardInterrupt:
        logger.info("\n‚õî Interruption utilisateur. Sauvegarde de l'√©tat...")
        save_checkpoint("interrupted", {
            "timestamp": datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"‚ùå Erreur critique: {e}")
        save_checkpoint("error", {
            "timestamp": datetime.now().isoformat(),
            "error": str(e)
        })
        raise

def run_test_generation(config):
    """Ex√©cute une g√©n√©ration de test pour v√©rifier le bon fonctionnement"""
    logger.info("üß™ Lancement de la g√©n√©ration de test...")
    
    try:
        # √âtablir les connexions MongoDB
        db_connections = get_db_connections(config.get("mongo_uri"))
        
        # Initialiser OpenAI GPT-3.5-turbo pour la g√©n√©ration de texte
        openai_client = None
        if config["ai_enabled"]:
            try:
                openai_client = OpenAIClient()
                logger.info("‚úÖ Client OpenAI initialis√© pour le test.")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de l'initialisation du client OpenAI: {e}")
                logger.warning("‚ö†Ô∏è D√©sactivation de la g√©n√©ration AI.")
                config["ai_enabled"] = False
        
        # Afficher la configuration de test
        logger.info("Configuration du test:")
        logger.info(f"- Posts d'√©v√©nements: {config['event_posts_count']}")
        logger.info(f"- Posts de restaurants: {config['restaurant_posts_count']}")
        logger.info(f"- Posts d'utilisateurs: {config['user_posts_count']}")
        
        # G√©n√©rer les posts
        start_time = time.time()
        posts = generate_all_posts(db_connections, config, openai_client)
        end_time = time.time()
        
        # Afficher les r√©sultats
        logger.info(f"‚úÖ Test termin√© en {end_time - start_time:.2f} secondes")
        logger.info(f"üìä {len(posts)} posts g√©n√©r√©s")
        
        # Afficher les d√©tails des posts g√©n√©r√©s
        for i, post in enumerate(posts):
            type_info = ""
            if "event_title" in post:
                type_info = f"√âv√©nement: {post['event_title']}"
            elif "restaurant_name" in post:
                type_info = f"Restaurant: {post['restaurant_name']}"
            elif "user_name" in post:
                type_info = f"Utilisateur: {post['user_name']} -> {post['venue_name']}"
            
            logger.info(f"üìù Post {i+1}: {type_info}")
        
        return posts
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test: {e}")
        return []

def main():
    """Point d'entr√©e du script"""
    parser = argparse.ArgumentParser(description="G√©n√©rateur de posts pour Choice App")
    parser.add_argument("--test", action="store_true", help="Mode test - g√©n√®re quelques posts et les affiche")
    parser.add_argument("--mongo-uri", type=str, help="URI MongoDB alternative")
    parser.add_argument("--users-count", type=int, dest="user_posts_count", default=DEFAULT_CONFIG["user_posts_count"], help="Nombre de posts utilisateurs √† g√©n√©rer")
    parser.add_argument("--events-count", type=int, dest="event_posts_count", default=DEFAULT_CONFIG["event_posts_count"], help="Nombre de posts d'√©v√©nements √† g√©n√©rer")
    parser.add_argument("--restaurants-count", type=int, dest="restaurant_posts_count", default=DEFAULT_CONFIG["restaurant_posts_count"], help="Nombre de posts de restaurants √† g√©n√©rer")
    parser.add_argument("--beauty-count", type=int, dest="beauty_posts_count", default=DEFAULT_CONFIG["beauty_posts_count"], help="Nombre de posts de lieux beaut√© √† g√©n√©rer")
    parser.add_argument("--one-shot", action="store_true", help="Ex√©cution unique puis arr√™t")
    parser.add_argument("--ai-disabled", action="store_true", help="D√©sactive les appels √† l'IA")
    parser.add_argument("--run-now", action="store_true", help="Ex√©cuter imm√©diatement, sans v√©rifier les heures actives")
    parser.add_argument('--use-test-db', action='store_true', help='Utiliser la base de donn√©es de test')
    parser.add_argument('--bypass-filters', action='store_true', help='Ignorer les filtres de dates et d\'active')
    parser.add_argument('--bypass-location-check', action='store_true', help='Ignorer la v√©rification de localisation pour les posts utilisateurs')
    parser.add_argument('--sleep-time', type=int, help='Temps d\'attente entre les g√©n√©rations (en secondes)', default=None)
    parser.add_argument('--mega-generation', action='store_true', help='G√©n√®re 1500 posts (r√©partis entre les diff√©rents types)')
    parser.add_argument("--force-ai", action="store_true", help="Force l'utilisation de l'IA et ignore le cache")
    parser.add_argument("--clear-cache", action="store_true", help="Vide le cache de l'IA avant g√©n√©ration")
    parser.add_argument('--with-video', action='store_true', help='Inclure des vid√©os dans les posts g√©n√©r√©s')
    parser.add_argument("--max-users", type=int, help="Nombre maximum d'utilisateurs √† traiter")
    parser.add_argument("--location-radius", type=int, help="Rayon en m√®tres pour la v√©rification de localisation", default=DEFAULT_CONFIG["location_radius_meters"])
    
    args = parser.parse_args()
    
    # Configuration personalis√©e
    config = DEFAULT_CONFIG.copy()
    
    # V√©rifier si mode mega-generation est activ√©
    if args.mega_generation:
        # R√©partition pour 1500 posts au total
        config.update({
            "event_posts_count": 300,
            "restaurant_posts_count": 500,
            "beauty_posts_count": 300,
            "user_posts_count": 400
        })
        logger.info("üöÄ Mode mega-generation activ√©: g√©n√©ration de 1500 posts")
        args.one_shot = True  # Forcer le mode one-shot
        args.ai_disabled = True  # D√©sactiver l'IA pour acc√©l√©rer
    
    # Si l'utilisateur demande de vider le cache
    if args.clear_cache:
        try:
            cache_files = os.listdir(API_CACHE_DIR)
            for file in cache_files:
                os.remove(os.path.join(API_CACHE_DIR, file))
            logger.info(f"‚úÖ Cache vid√©, {len(cache_files)} fichiers supprim√©s")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la suppression du cache: {e}")
            
    # Force l'utilisation de l'IA
    if args.force_ai:
        config["ai_enabled"] = True
        # Modifier la fonction get_cached_response pour toujours retourner None
        global get_cached_response
        original_get_cached_response = get_cached_response
        def force_no_cache(prompt):
            return None
        get_cached_response = force_no_cache
        logger.info("‚öôÔ∏è Mode force-AI activ√©: cache d√©sactiv√© et IA forc√©e")
    
    # Appliquer les param√®tres de ligne de commande
    if args.mongo_uri:
        global MONGO_URI
        MONGO_URI = args.mongo_uri
    
    if args.use_test_db:
        global USE_TEST_CONNECTION
        USE_TEST_CONNECTION = True
        logger.info("üîÑ Utilisation de la base de donn√©es de test activ√©e")
    
    if args.bypass_filters:
        global BYPASS_FILTERS
        BYPASS_FILTERS = True
        logger.info("‚ö†Ô∏è Mode bypass filters activ√©")
    
    if args.bypass_location_check:
        config["verify_location"] = False
        logger.info("‚ö†Ô∏è V√©rification de localisation d√©sactiv√©e")
    
    if args.sleep_time is not None:
        config["sleep_time"] = args.sleep_time
    
    if args.ai_disabled:
        config["ai_enabled"] = False
        logger.info("‚ö†Ô∏è IA d√©sactiv√©e, mode de secours activ√©")
    
    if args.user_posts_count is not None:
        config["user_posts_count"] = args.user_posts_count
    if args.event_posts_count is not None:
        config["event_posts_count"] = args.event_posts_count
    if args.restaurant_posts_count is not None:
        config["restaurant_posts_count"] = args.restaurant_posts_count
    if args.beauty_posts_count is not None:
        config["beauty_posts_count"] = args.beauty_posts_count
    
    if args.location_radius is not None:
        config["location_radius_meters"] = args.location_radius
    
    if args.max_users is not None:
        config["max_users"] = args.max_users
    
    # Initialiser OpenAI GPT-3.5-turbo si l'IA est activ√©e
    openai_client = None
    if config["ai_enabled"]:
        try:
            openai_client = OpenAIClient()
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation du client OpenAI: {e}")
            logger.warning("‚ö†Ô∏è D√©sactivation de la g√©n√©ration AI.")
            config["ai_enabled"] = False
    
    # Passer l'option vid√©o dans la config
    config["with_video"] = args.with_video
    
    # V√©rification des heures actives
    if not args.run_now and not args.test and not args.one_shot:
        if not is_within_active_hours():
            current_hour = datetime.now().hour
            logger.info(f"üí§ Heure actuelle ({current_hour}h) hors plage active (3h-7h). Attente...")
            # Attendre jusqu'√† 3h du matin
            time.sleep(60 * (3 - current_hour))
    
    if args.test:
        # Ex√©cuter le test
        run_test_generation(config)
    elif args.one_shot or args.run_now:
        # Mode one-shot: g√©n√©ration unique
        mode_desc = "one-shot" if args.one_shot else "run-now"
        logger.info(f"üéØ Mode {mode_desc} activ√©. G√©n√©ration unique en cours...")
        db_connections = get_db_connections()
        
        # G√©n√©rer tous les posts
        all_posts = generate_all_posts(db_connections, config, openai_client)
        
        # Afficher un r√©sum√©
        event_posts = [p for p in all_posts if p.get("is_event_post", False)]
        restaurant_posts = [p for p in all_posts if p.get("is_restaurant_post", False)]
        beauty_posts = [p for p in all_posts if p.get("is_beauty_post", False)]
        user_posts = [p for p in all_posts if not p.get("is_event_post", False) and not p.get("is_restaurant_post", False) and not p.get("is_beauty_post", False)]

        logger.info(f"üìä R√©sum√© de la g√©n√©ration {mode_desc}:")
        logger.info(f"  ‚Ä¢ {len(event_posts)} posts d'√©v√©nements")
        logger.info(f"  ‚Ä¢ {len(restaurant_posts)} posts de restaurants")
        logger.info(f"  ‚Ä¢ {len(beauty_posts)} posts de lieux de beaut√©")
        logger.info(f"  ‚Ä¢ {len(user_posts)} posts d'utilisateurs")
        logger.info(f"  ‚Ä¢ {len(all_posts)} posts au total")
        logger.info("‚úÖ G√©n√©ration termin√©e. Arr√™t du script.")
    else:
        # Mode normal (ex√©cution continue)
        logger.info("üöÄ D√©marrage du g√©n√©rateur de posts automatiques...")
        run_generator(config, openai_client)

def create_post_for_beauty_place(db_connections, beauty_place, openai_client=None):
    """Cr√©e un post producteur pour un lieu de beaut√©/bien-√™tre en utilisant OpenAI."""
    logger.info(f"üßñ‚Äç‚ôÄÔ∏è Cr√©ation d'un post pour le lieu de beaut√©: {beauty_place.get('name', 'Sans nom')}")
    
    try:
        # Pr√©parer les donn√©es pour le post
        place_name = beauty_place.get('name', 'Sans nom')
        place_id = str(beauty_place.get('_id', ''))
        place_category = beauty_place.get('category', '')
        place_sous_categorie = beauty_place.get('sous_categorie', '')
        
        # D√©terminer la cat√©gorie pr√©cise pour ce lieu de beaut√©
        beauty_category = determine_venue_category(beauty_place, is_beauty=True)
        
        # Si la cat√©gorie n'est pas d√©termin√©e, prendre une cat√©gorie par d√©faut
        if not beauty_category:
            logger.warning(f"‚ö†Ô∏è Cat√©gorie non d√©termin√©e pour {place_name}, utilisation de 'spa' par d√©faut")
            beauty_category = "spa"
        
        # R√©cup√©rer les √©mojis pour cette cat√©gorie
        emojis = VENUE_CATEGORIES.get(beauty_category, VENUE_CATEGORIES["default"])["emojis_positive"]
        emoji = random.choice(emojis) if emojis else "‚ú®"
            
        # G√©n√©rer des donn√©es pour ce lieu
        photos = beauty_place.get('photos', [])
        profile_photo = beauty_place.get('profile_photo', '')
        
        # Si pas de photo de profil sp√©cifique, chercher dans d'autres champs
        if not profile_photo:
            for field in ['main_image', 'image', 'photo', 'thumbnail', 'logo', 'avatar']:
                if field in beauty_place and beauty_place[field]:
                    profile_photo = beauty_place[field]
                    break
        
        # Si aucune photo trouv√©e, utiliser la premi√®re du tableau photos
        if not profile_photo and photos and len(photos) > 0:
            profile_photo = photos[0]
            
        # D√©finir un avatar par d√©faut si aucune photo n'est trouv√©e
        if not profile_photo:
            profile_photo = "/images/default_beauty_avatar.png"
            
        address = beauty_place.get('address', 'Adresse non disponible')
        description = beauty_place.get('description', 'Description non disponible')
        average_score = beauty_place.get('average_score', 4.0)  # Note par d√©faut de 4.0
        
        # Extraire les coordonn√©es selon leur format
        coordinates = []
        if "location" in beauty_place and "coordinates" in beauty_place["location"]:
            coordinates = beauty_place["location"]["coordinates"]
        elif "gps_coordinates" in beauty_place:
            if "coordinates" in beauty_place["gps_coordinates"]:
                coordinates = beauty_place["gps_coordinates"]["coordinates"]
            elif "lat" in beauty_place["gps_coordinates"] and "lng" in beauty_place["gps_coordinates"]:
                coordinates = [beauty_place["gps_coordinates"]["lng"], beauty_place["gps_coordinates"]["lat"]]
        
        # Choisir un template al√©atoire entre positif et n√©gatif selon un ratio 80/20 biais√© vers le positif
        is_positive = random.choices([True, False], weights=[80, 20], k=1)[0]

        # Si note < 3.5, on force un post n√©gatif
        if average_score < 3.5:
            is_positive = False
            
        # Si note > 4.5, on force un post positif
        if average_score > 4.5:
            is_positive = True
            
        # Construire le prompt pour OpenAI GPT-3.5-turbo
        if is_positive:
            instructions = f"""
[INST] IMPORTANT - R√âPONDS UNIQUEMENT EN FRAN√áAIS.

G√©n√®re un post court pour {place_name}, un lieu de beaut√© et bien-√™tre.

Ce post doit:
1. √ätre √©crit en FRAN√áAIS UNIQUEMENT
2. Parler UNIQUEMENT des services propos√©s dans ce lieu pr√©cis
3. NE PAS MENTIONNER DE PARTENARIAT avec d'autres √©tablissements
4. Utiliser l'emoji {emoji}
5. √âvoquer le bien-√™tre, la d√©tente ou les soins
6. √ätre √† la premi√®re personne du pluriel (nous)
7. Faire moins de 250 caract√®res

INTERDIT:
- Ne parle pas de partenariat
- N'utilise aucun mot anglais
- Ne mentionne pas d'autres √©tablissements
- Ne propose pas de r√©duction ni de promotion pr√©cise

Exemple correct: "{emoji} Chez [nom], nous vous proposons des soins relaxants dans une ambiance apaisante. Notre √©quipe de professionnels sera ravie de vous accueillir pour un moment de d√©tente. Venez d√©couvrir notre espace bien-√™tre!"
[/INST]
"""
        else:
            instructions = f"""
[INST] IMPORTANT - R√âPONDS UNIQUEMENT EN FRAN√áAIS.

G√©n√®re un post court pour {place_name}, un lieu de beaut√© et bien-√™tre.

Ce post doit:
1. √ätre √©crit en FRAN√áAIS UNIQUEMENT
2. Parler UNIQUEMENT des services propos√©s dans ce lieu pr√©cis
3. NE PAS MENTIONNER DE PARTENARIAT avec d'autres √©tablissements
4. Utiliser l'emoji {emoji}
5. √âvoquer le bien-√™tre, la d√©tente ou les soins
6. √ätre √† la premi√®re personne du pluriel (nous)
7. Faire moins de 250 caract√®res

INTERDIT:
- Ne parle pas de partenariat
- N'utilise aucun mot anglais
- Ne mentionne pas d'autres √©tablissements
- Ne propose pas de r√©duction ni de promotion pr√©cise

Exemple correct: "{emoji} Chez [nom], nous vous proposons des soins relaxants dans une ambiance apaisante. Notre √©quipe de professionnels sera ravie de vous accueillir pour un moment de d√©tente. Venez d√©couvrir notre espace bien-√™tre!"
[/INST]
"""
    
        # G√©n√©rer le contenu avec OpenAI
        post_content = None
        if openai_client:
            try:
                post_content = openai_client.generate_text(instructions)
                if not post_content or len(post_content) < 20:
                    raise Exception("Contenu g√©n√©r√© trop court ou vide")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur lors de la g√©n√©ration avec OpenAI: {e}")
                post_content = ""
        
        # Si pas de contenu g√©n√©r√© par OpenAI ou contenu trop court, utiliser un texte par d√©faut
        if not post_content or len(post_content) < 20:
            logger.info(f"‚ö†Ô∏è Utilisation d'un texte par d√©faut pour le lieu de beaut√© {place_name}")
            if is_positive:
                post_content = f"{emoji} Chez {place_name}, nous vous accueillons dans une ambiance relaxante pour prendre soin de vous. Nos experts sont d√©di√©s √† votre bien-√™tre et proposent des soins personnalis√©s de qualit√©. Prenez rendez-vous et offrez-vous un moment de d√©tente! #beaut√© #bien√™tre"
            else:
                post_content = f"{emoji} Cette semaine chez {place_name}, nous vous proposons une offre sp√©ciale sur nos soins signatures. Venez d√©couvrir notre √©quipe de professionnels dans un cadre apaisant. R√©servez votre moment d√©tente! #beaut√© #bien√™tre"
        
        # Cr√©er l'objet post
        post = {
            "content": post_content,
            "time_posted": datetime.now().isoformat(),
            "author": {
                "id": place_id,
                "name": place_name,
                "avatar": profile_photo
            },
            "producer_id": place_id,
            "isProducerPost": True,
            "isLeisureProducer": False,
            "isBeautyProducer": True,  # Flag sp√©cifique pour identifier les posts de beaut√©
            "beauty_producer": True,    # Flag alternatif pour compatibilit√©
            "post_type": "beauty",      # Champ explicite pour le type
            "is_automated": True,
            "is_beauty_post": True,  # Ajout d'un indicateur clair pour le comptage
            "likes": 0,              # Pour compatibilit√© frontend
            "likes_count": 0,
            "comments": 0,
            "comments_count": 0,
            "interested": False,
            "interested_count": 0,
            "choice": False,
            "choice_count": 0,
            "beauty_id": place_id,      # Identifiant du lieu de beaut√©
            "beauty_name": place_name,  # Nom du lieu explicite
            "beauty_category": beauty_category,
            "beauty_subcategory": place_sous_categorie
        }
        
        # Ajouter la localisation si disponible
        if coordinates:
            post["location"] = {
                "type": "Point",
                "coordinates": coordinates
            }
        
        # Ajouter des m√©dias au post
        media = []
        
        # Ajouter l'image principale
        if profile_photo:
            media.append({
                "type": "image",
                "url": profile_photo,
                "width": 800,
                "height": 600
            })
        
        # Ajouter d'autres photos si disponibles (max 2 photos suppl√©mentaires)
        if photos and len(photos) > 0:
            for photo in photos[:2]:
                # √âviter d'ajouter la m√™me photo que le profil
                if photo != profile_photo:
                    media.append({
                        "type": "image",
                        "url": photo,
                        "width": 600,
                        "height": 400
                    })
        
        # Ajouter les m√©dias au post
        post["media"] = media
        
        # Ins√©rer le post dans la base de donn√©es
        post_id = db_connections["choice"][COLL_POSTS].insert_one(post).inserted_id
        logger.info(f"‚úÖ Post cr√©√© avec succ√®s dans la base de donn√©es. ID: {post_id}")
        
        # Mettre √† jour le lieu de beaut√© avec le post
        try:
            db_connections["beauty"][COLL_BEAUTY_PLACES].update_one(
                {"_id": ObjectId(place_id)},
                {"$push": {"posts": post_id}}
            )
            logger.info(f"‚úÖ Lieu de beaut√© {place_id} mis √† jour avec le nouveau post")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lors de la mise √† jour du lieu de beaut√©: {e}")
        
        return {
            "post_id": str(post_id),
            "beauty_name": place_name,
            "post_type": "beauty"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation du post pour lieu de beaut√©: {e}")
        return None

if __name__ == "__main__":
    main()